// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.5.2

//# unitInfo: Provides: Dune__exe__Prooftree
//# unitInfo: Requires: Dune__exe__Rules, Line, Stdlib__Hashtbl
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Dune_exe_Rules = global_data.Dune__exe__Rules,
    Line = global_data.Line,
    lines = caml_call2(Stdlib_Hashtbl[1], 0, 20);
   function addline(linenum, line){
    var _c_ = caml_call1(Line[9], line);
    caml_call3(Stdlib_Hashtbl[5], lines, linenum, _c_);
    var _d_ = caml_call1(Stdlib_Hashtbl[6], lines);
    return caml_call2(Dune_exe_Rules[1], _d_, linenum);
   }
   function editline(linenum, line){
    var _a_ = caml_call1(Line[9], line);
    caml_call3(Stdlib_Hashtbl[11], lines, linenum, _a_);
    var _b_ = caml_call1(Stdlib_Hashtbl[6], lines);
    return caml_call2(Dune_exe_Rules[1], _b_, linenum);
   }
   function deleteline(linenum){
    caml_call2(Stdlib_Hashtbl[10], lines, linenum);
    return caml_call1(Dune_exe_Rules[2], lines);
   }
   var Dune_exe_Prooftree = [0, lines, addline, editline, deleteline];
   runtime.caml_register_global(3, Dune_exe_Prooftree, "Dune__exe__Prooftree");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiIubWFpbi5lb2Jqcy9qc29vL2R1bmVfX2V4ZV9fUHJvb2Z0cmVlLmNtby5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJsaW5lcyIsImFkZGxpbmUiLCJsaW5lbnVtIiwibGluZSIsImVkaXRsaW5lIiwiZGVsZXRlbGluZSJdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2Vfcm9vdC9iaW4vcHJvb2Z0cmVlLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7R0FFb0M7Ozs7O0lBQWhDQSxRQUFnQztZQUVoQ0MsUUFBUUMsU0FBUUM7SUFDUSxVQUFBLG9CQURSQTtJQUNsQiw4QkFIRUgsT0FFUUU7SUFFSyxVQUFBLDhCQUpiRjtJQUdGLE9BQUEsbUNBRFVFO0dBRWlDO1lBRXpDRSxTQUFTRixTQUFRQztJQUNXLFVBQUEsb0JBRFhBO0lBQ25CLCtCQVBFSCxPQU1TRTtJQUVJLFVBQUEsOEJBUmJGO0lBT0YsT0FBQSxtQ0FEV0U7R0FFZ0M7WUFFekNHLFdBQVdIO0lBQ2IsK0JBWEVGLE9BVVdFO3lDQVZYRjtHQVltQjtnQ0FabkJBLE9BRUFDLFNBSUFHLFVBSUFDOzs7RSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4gTGluZVxuXG5sZXQgbGluZXMgOiAoaW50LCBsaW5lKSBIYXNodGJsLnQgPSBIYXNodGJsLmNyZWF0ZSAyMFxuXG5sZXQgYWRkbGluZSBsaW5lbnVtIGxpbmUgPVxuICBIYXNodGJsLmFkZCBsaW5lcyBsaW5lbnVtIChMaW5lLmludGVycCBsaW5lKSA7XG4gIFJ1bGVzLmlzX3ZhbGlkIChIYXNodGJsLmZpbmQgbGluZXMpIGxpbmVudW1cblxubGV0IGVkaXRsaW5lIGxpbmVudW0gbGluZSA9XG4gIEhhc2h0YmwucmVwbGFjZSBsaW5lcyBsaW5lbnVtIChMaW5lLmludGVycCBsaW5lKSA7XG4gIFJ1bGVzLmlzX3ZhbGlkIChIYXNodGJsLmZpbmQgbGluZXMpIGxpbmVudW1cblxubGV0IGRlbGV0ZWxpbmUgbGluZW51bSA9XG4gIEhhc2h0YmwucmVtb3ZlIGxpbmVzIGxpbmVudW0gO1xuICBSdWxlcy5hbGxfdmFsaWQgbGluZXNcbiJdfQ==
