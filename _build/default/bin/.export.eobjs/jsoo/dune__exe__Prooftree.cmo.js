// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.5.2

//# unitInfo: Provides: Dune__exe__Prooftree
//# unitInfo: Requires: Dune__exe__Rules, Stdlib__Hashtbl
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Dune_exe_Rules = global_data.Dune__exe__Rules,
    lines = caml_call2(Stdlib_Hashtbl[1], 0, 20);
   function addline(linenum, line){
    caml_call3(Stdlib_Hashtbl[5], lines, linenum, line);
    var _b_ = caml_call1(Stdlib_Hashtbl[6], lines);
    return caml_call2(Dune_exe_Rules[1], _b_, linenum);
   }
   function editline(linenum, line){
    caml_call3(Stdlib_Hashtbl[11], lines, linenum, line);
    var _a_ = caml_call1(Stdlib_Hashtbl[6], lines);
    return caml_call2(Dune_exe_Rules[1], _a_, linenum);
   }
   function deleteline(linenum){
    caml_call2(Stdlib_Hashtbl[10], lines, linenum);
    return caml_call1(Dune_exe_Rules[2], lines);
   }
   var Dune_exe_Prooftree = [0, lines, addline, editline, deleteline];
   runtime.caml_register_global(2, Dune_exe_Prooftree, "Dune__exe__Prooftree");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiIuZXhwb3J0LmVvYmpzL2pzb28vZHVuZV9fZXhlX19Qcm9vZnRyZWUuY21vLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbImxpbmVzIiwiYWRkbGluZSIsImxpbmVudW0iLCJsaW5lIiwiZWRpdGxpbmUiLCJkZWxldGVsaW5lIl0sInNvdXJjZXMiOlsiL3dvcmtzcGFjZV9yb290L2Jpbi9wcm9vZnRyZWUubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztHOzs7OztHOzs7OztHOzs7OztHQUVvQzs7OztJQUFoQ0EsUUFBZ0M7WUFHaENDLFFBQVFDLFNBQVFDO0lBQ2hCLDhCQUpBSCxPQUdRRSxTQUFRQztJQUVELFVBQUEsOEJBTGZIO0lBSUEsT0FBQSxtQ0FEUUU7R0FFbUM7WUFHM0NFLFNBQVNGLFNBQVFDO0lBQ2pCLCtCQVRBSCxPQVFTRSxTQUFRQztJQUVGLFVBQUEsOEJBVmZIO0lBU0EsT0FBQSxtQ0FEU0U7R0FFa0M7WUFHM0NHLFdBQVdIO0lBQ1gsK0JBZEFGLE9BYVdFO3lDQWJYRjtHQWVxQjtnQ0FmckJBLE9BR0FDLFNBS0FHLFVBS0FDOzs7RSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4gTGluZVxuXG5sZXQgbGluZXMgOiAoaW50LCBsaW5lKSBIYXNodGJsLnQgPSBIYXNodGJsLmNyZWF0ZSAyMFxuXG5cbmxldCBhZGRsaW5lIGxpbmVudW0gbGluZSA9XG4gICAgSGFzaHRibC5hZGQgbGluZXMgbGluZW51bSBsaW5lO1xuICAgIFJ1bGVzLmlzX3ZhbGlkIChIYXNodGJsLmZpbmQgbGluZXMpIGxpbmVudW1cblxuXG5sZXQgZWRpdGxpbmUgbGluZW51bSBsaW5lID0gXG4gICAgSGFzaHRibC5yZXBsYWNlIGxpbmVzIGxpbmVudW0gbGluZTtcbiAgICBSdWxlcy5pc192YWxpZCAoSGFzaHRibC5maW5kIGxpbmVzKSBsaW5lbnVtIFxuXG5cbmxldCBkZWxldGVsaW5lIGxpbmVudW0gPSBcbiAgICBIYXNodGJsLnJlbW92ZSBsaW5lcyBsaW5lbnVtO1xuICAgIFJ1bGVzLmFsbF92YWxpZCBsaW5lc1xuIl19
