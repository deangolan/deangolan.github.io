// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.5.2

//# unitInfo: Provides: Interp__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Interp = [0],
    Interp$0 = [0, Interp];
   runtime.caml_register_global(0, Interp$0, "Interp__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Ast
//# unitInfo: Requires: Stdlib, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_a = "%a",
    cst$8 = ")",
    cst$13 = "))",
    cst$12 = ",@ ",
    cst_2 = "<2>",
    cst_fun$1 = "<fun>",
    cst$9 = "@ ",
    cst$11 = "@,",
    cst$14 = "@,))@]",
    cst$10 = "@])",
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$8,
    cst$1 = "(",
    cst = " /\\ ",
    cst$2 = " \\/ ",
    cst$3 = " -> ",
    cst$4 = " <-> ",
    cst$6 = cst$8,
    cst$7 = "~(",
    cst$5 = "~",
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    pp_prop = function _$_(_Z_, ___){return _$_.fun(_Z_, ___);},
    show_prop = function _Y_(_X_){return _Y_.fun(_X_);},
    cst_Ast_And = "Ast.And",
    cst_Ast_Or = "Ast.Or",
    cst_Ast_Impl = "Ast.Impl",
    cst_Ast_Iff = "Ast.Iff",
    cst_T = "T",
    cst_F = "F",
    _B_ = [0, [15, 0], cst_a],
    cst_fun$0 = cst_fun$1,
    cst_fun = cst_fun$1,
    _n_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Premise", [17, [0, cst$9, 1, 0], 0]]]],
       "(@[<2>Ast.Premise@ "],
    _o_ = [0, [17, 0, [12, 41, 0]], cst$10],
    _p_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.EquivalenceRule (", [17, [0, cst$11, 0, 0], 0]]]],
       "(@[<2>Ast.EquivalenceRule (@,"],
    _q_ = [0, [12, 44, [17, [0, cst$9, 1, 0], 0]], cst$12],
    _r_ = [0, [12, 44, [17, [0, cst$9, 1, 0], 0]], cst$12],
    _s_ = [0, [17, [0, cst$11, 0, 0], [11, cst$13, [17, 0, 0]]], cst$14],
    _t_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.ImplicationRule (", [17, [0, cst$11, 0, 0], 0]]]],
       "(@[<2>Ast.ImplicationRule (@,"],
    _u_ = [0, [12, 44, [17, [0, cst$9, 1, 0], 0]], cst$12],
    _v_ = [0, [12, 44, [17, [0, cst$9, 1, 0], 0]], cst$12],
    _w_ = [0, [12, 44, [17, [0, cst$9, 1, 0], 0]], cst$12],
    _x_ = [0, [17, [0, cst$11, 0, 0], [11, cst$13, [17, 0, 0]]], cst$14],
    _y_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Lineref", [17, [0, cst$9, 1, 0], 0]]]],
       "(@[<2>Ast.Lineref@ "],
    _z_ = [0, [4, 0, 0, 0, 0], "%d"],
    _A_ = [0, [17, 0, [12, 41, 0]], cst$10],
    _m_ = [0, [15, 0], cst_a],
    _a_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Atom", [17, [0, cst$9, 1, 0], 0]]]],
       "(@[<2>Ast.Atom@ "],
    _b_ = [0, [3, 0, 0], "%S"],
    _c_ = [0, [17, 0, [12, 41, 0]], cst$10],
    _d_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Bool", [17, [0, cst$9, 1, 0], 0]]]],
       "(@[<2>Ast.Bool@ "],
    _e_ = [0, [9, 0, 0], "%B"],
    _f_ = [0, [17, 0, [12, 41, 0]], cst$10],
    _g_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Conn (", [17, [0, cst$11, 0, 0], 0]]]],
       "(@[<2>Ast.Conn (@,"],
    _h_ = [0, [12, 44, [17, [0, cst$9, 1, 0], 0]], cst$12],
    _i_ = [0, [12, 44, [17, [0, cst$9, 1, 0], 0]], cst$12],
    _j_ = [0, [17, [0, cst$11, 0, 0], [11, cst$13, [17, 0, 0]]], cst$14],
    _k_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Not", [17, [0, cst$9, 1, 0], 0]]]],
       "(@[<2>Ast.Not@ "],
    _l_ = [0, [17, 0, [12, 41, 0]], cst$10];
   caml_update_dummy
    (pp_prop,
     function(fmt, param){
      switch(param[0]){
        case 0:
         var a0 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _a_);
         caml_call1(caml_call2(Stdlib_Format[137], fmt, _b_), a0);
         return caml_call2(Stdlib_Format[137], fmt, _c_);
        case 1:
         var a0$0 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _d_);
         caml_call1(caml_call2(Stdlib_Format[137], fmt, _e_), a0$0);
         return caml_call2(Stdlib_Format[137], fmt, _f_);
        case 2:
         var a2 = param[3], a1 = param[2], a0$1 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _g_);
         switch(a0$1){
           case 0:
            caml_call2(Stdlib_Format[13], fmt, cst_Ast_And); break;
           case 1:
            caml_call2(Stdlib_Format[13], fmt, cst_Ast_Or); break;
           case 2:
            caml_call2(Stdlib_Format[13], fmt, cst_Ast_Impl); break;
           default: caml_call2(Stdlib_Format[13], fmt, cst_Ast_Iff);
         }
         caml_call2(Stdlib_Format[137], fmt, _h_);
         caml_call1(caml_call1(pp_prop, fmt), a1);
         caml_call2(Stdlib_Format[137], fmt, _i_);
         caml_call1(caml_call1(pp_prop, fmt), a2);
         return caml_call2(Stdlib_Format[137], fmt, _j_);
        default:
         var a0$2 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _k_);
         caml_call1(caml_call1(pp_prop, fmt), a0$2);
         return caml_call2(Stdlib_Format[137], fmt, _l_);
      }
     });
   caml_update_dummy
    (show_prop,
     function(x){return caml_call3(Stdlib_Format[141], _m_, pp_prop, x);});
   var
    pp = function _W_(_U_, _V_){return _W_.fun(_U_, _V_);},
    show = function _T_(_S_){return _T_.fun(_S_);};
   caml_update_dummy
    (pp,
     function(fmt, param){
      switch(param[0]){
        case 0:
         var a0 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _n_);
         caml_call1(caml_call1(pp_prop, fmt), a0);
         return caml_call2(Stdlib_Format[137], fmt, _o_);
        case 1:
         var a2 = param[3], a1 = param[2];
         caml_call2(Stdlib_Format[137], fmt, _p_);
         caml_call2(Stdlib_Format[13], fmt, cst_fun);
         caml_call2(Stdlib_Format[137], fmt, _q_);
         caml_call1(caml_call1(pp, fmt), a1);
         caml_call2(Stdlib_Format[137], fmt, _r_);
         caml_call1(caml_call1(pp_prop, fmt), a2);
         return caml_call2(Stdlib_Format[137], fmt, _s_);
        case 2:
         var a3 = param[4], a2$0 = param[3], a1$0 = param[2];
         caml_call2(Stdlib_Format[137], fmt, _t_);
         caml_call2(Stdlib_Format[13], fmt, cst_fun$0);
         caml_call2(Stdlib_Format[137], fmt, _u_);
         caml_call1(caml_call1(pp, fmt), a1$0);
         caml_call2(Stdlib_Format[137], fmt, _v_);
         caml_call1(caml_call1(pp, fmt), a2$0);
         caml_call2(Stdlib_Format[137], fmt, _w_);
         caml_call1(caml_call1(pp_prop, fmt), a3);
         return caml_call2(Stdlib_Format[137], fmt, _x_);
        default:
         var a0$0 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _y_);
         caml_call1(caml_call2(Stdlib_Format[137], fmt, _z_), a0$0);
         return caml_call2(Stdlib_Format[137], fmt, _A_);
      }
     });
   caml_update_dummy
    (show, function(x){return caml_call3(Stdlib_Format[141], _B_, pp, x);});
   function format_prop(param){
    switch(param[0]){
      case 0:
       var a = param[1]; return a;
      case 1:
       var b = param[1]; return b ? cst_T : cst_F;
      case 2:
       var q = param[3], p = param[2], conn = param[1];
       switch(conn){
         case 0:
          var
           _C_ = format_prop(q),
           _D_ = caml_call2(Stdlib[28], cst, _C_),
           _E_ = format_prop(p),
           s = caml_call2(Stdlib[28], _E_, _D_);
          break;
         case 1:
          var
           _G_ = format_prop(q),
           _H_ = caml_call2(Stdlib[28], cst$2, _G_),
           _I_ = format_prop(p),
           s = caml_call2(Stdlib[28], _I_, _H_);
          break;
         case 2:
          var
           _J_ = format_prop(q),
           _K_ = caml_call2(Stdlib[28], cst$3, _J_),
           _L_ = format_prop(p),
           s = caml_call2(Stdlib[28], _L_, _K_);
          break;
         default:
          var
           _M_ = format_prop(q),
           _N_ = caml_call2(Stdlib[28], cst$4, _M_),
           _O_ = format_prop(p),
           s = caml_call2(Stdlib[28], _O_, _N_);
       }
       var _F_ = caml_call2(Stdlib[28], s, cst$0);
       return caml_call2(Stdlib[28], cst$1, _F_);
      default:
       var p$0 = param[1];
       if(1 < p$0[0]){
        var _Q_ = format_prop(p$0), _R_ = caml_call2(Stdlib[28], _Q_, cst$6);
        return caml_call2(Stdlib[28], cst$7, _R_);
       }
       var _P_ = format_prop(p$0);
       return caml_call2(Stdlib[28], cst$5, _P_);
    }
   }
   var Interp_Ast = [0, pp, show, format_prop];
   runtime.caml_register_global(48, Interp_Ast, "Interp__Ast");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Eval
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function negate(exp){
    var exp$0 = simplify(exp);
    if(1 !== exp$0[0]) return [3, exp$0];
    var a = exp$0[1];
    return [1, 1 - a];
   }
   function collapse(binop, exp1, exp2){
    if(1 === exp1[0] && 1 === exp2[0]){
     var b = exp2[1], a = exp1[1];
     switch(binop){
       case 0:
        var b$0 = a ? b : a; return [1, b$0];
       case 1:
        var a$0 = a || b; return [1, a$0];
       case 2:
        var _b_ = 1 - a, _c_ = _b_ || b; return [1, _c_];
       default: return [1, a === b ? 1 : 0];
     }
    }
    return [2, binop, exp1, exp2];
   }
   function simplify(atom){
    switch(atom[0]){
      case 0:
       return atom;
      case 1:
       return atom;
      case 2:
       var
        exp2 = atom[3],
        exp1 = atom[2],
        binop = atom[1],
        _a_ = simplify(exp2);
       return collapse(binop, simplify(exp1), _a_);
      default:
       var exp = atom[1];
       if(1 !== exp[0]) return negate(exp);
       var a = exp[1];
       return [1, 1 - a];
    }
   }
   var Interp_Eval = [0, simplify, collapse, negate];
   runtime.caml_register_global(0, Interp_Eval, "Interp__Eval");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Rules
//# unitInfo: Requires: Interp__Ast, Interp__Eval, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = " !=> ",
    cst$1 = ", ",
    cst = " <!=> ",
    Stdlib = global_data.Stdlib,
    Interp_Eval = global_data.Interp__Eval,
    Interp_Ast = global_data.Interp__Ast,
    Invalid = [248, "Interp__Rules.Invalid", runtime.caml_fresh_oo_id(0)],
    cst_Precondition_violated = "Precondition violated";
   function not_equivalent(p, q){
    var
     _aJ_ = caml_call1(Interp_Ast[3], q),
     _aK_ = caml_call2(Stdlib[28], cst, _aJ_),
     _aL_ = caml_call1(Interp_Ast[3], p);
    return [0, Invalid, caml_call2(Stdlib[28], _aL_, _aK_)];
   }
   function not_implied(p1, p2, q){
    var
     _aD_ = caml_call1(Interp_Ast[3], q),
     _aE_ = caml_call2(Stdlib[28], cst$0, _aD_),
     _aF_ = caml_call1(Interp_Ast[3], p2),
     _aG_ = caml_call2(Stdlib[28], _aF_, _aE_),
     _aH_ = caml_call2(Stdlib[28], cst$1, _aG_),
     _aI_ = caml_call1(Interp_Ast[3], p1);
    return [0, Invalid, caml_call2(Stdlib[28], _aI_, _aH_)];
   }
   function is_equivalent(pattern, p, q){
    if(check_equivelence(pattern, p, q)) return q;
    throw caml_maybe_attach_backtrace(not_equivalent(p, q), 1);
   }
   function check_equivelence(pattern, p, q){
    var p$0 = p, q$0 = q;
    for(;;){
     var _aw_ = caml_call2(pattern, p$0, q$0);
     if(_aw_)
      var _ax_ = _aw_;
     else{
      var _ay_ = caml_call2(pattern, q$0, p$0);
      if(_ay_)
       var _ax_ = _ay_;
      else{
       switch(p$0[0]){
         case 2:
          if(2 === q$0[0]){
           var
            q2 = q$0[3],
            p2 = q$0[2],
            conn2 = q$0[1],
            q1 = p$0[3],
            p1 = p$0[2],
            conn1 = p$0[1];
           if(conn1 === conn2){
            var
             _az_ = check_equivelence(pattern, p1, p2),
             _aA_ = _az_ || check_equivelence(pattern, q1, q2);
            if(_aA_)
             var _aB_ = caml_equal(p1, p2), _aC_ = _aB_ || caml_equal(q1, q2);
            else
             var _aC_ = _aA_;
            return _aC_;
           }
          }
          break;
         case 3:
          if(3 === q$0[0]){
           var q$1 = q$0[1], p$1 = p$0[1], p$0 = p$1, q$0 = q$1;
           continue;
          }
          break;
       }
       var _ax_ = 0;
      }
     }
     return _ax_;
    }
   }
   function is_implication(pattern, p1, p2, q){
    if(check_implication(pattern, p1, p2, q)) return q;
    throw caml_maybe_attach_backtrace(not_implied(p1, p2, q), 1);
   }
   function check_implication(pattern, p1, p2, q){
    var p1$0 = p1, q$0 = q;
    for(;;){
     var _aq_ = caml_call3(pattern, p1$0, p2, q$0);
     if(_aq_)
      var _ar_ = _aq_;
     else{
      switch(p1$0[0]){
        case 2:
         if(2 === q$0[0]){
          var
           s2 = q$0[3],
           r2 = q$0[2],
           conn2 = q$0[1],
           s1 = p1$0[3],
           r1 = p1$0[2],
           conn1 = p1$0[1];
          if(conn1 === conn2){
           var
            _as_ = check_implication(pattern, r1, p2, r2),
            _at_ = _as_ || check_implication(pattern, s1, p2, s2);
           if(_at_)
            var _au_ = caml_equal(r1, r2), _av_ = _au_ || caml_equal(s1, s2);
           else
            var _av_ = _at_;
           return _av_;
          }
         }
         break;
        case 3:
         if(3 === q$0[0]){
          var s = q$0[1], p1$1 = p1$0[1], p1$0 = p1$1, q$0 = s;
          continue;
         }
         break;
      }
      var _ar_ = 0;
     }
     return _ar_;
    }
   }
   function le(p, q){
    function pattern(p, q){
     var _ae_ = caml_equal(caml_call1(Interp_Eval[1], p), q);
     if(_ae_)
      var _af_ = _ae_;
     else{
      var _ag_ = caml_equal(caml_call1(Interp_Eval[1], q), p);
      if(_ag_)
       var _af_ = _ag_;
      else{
       if(2 === p[0]){
        var _ah_ = p[1];
        if(2 === _ah_){
         if(2 === q[0] && 1 === q[1]){
          var match = q[2];
          if(3 === match[0]){
           var
            q2 = q[3],
            p2 = match[1],
            q1 = p[3],
            p1 = p[2],
            _ai_ = caml_equal(p1, p2),
            _aj_ = _ai_ ? caml_equal(q1, q2) : _ai_;
           return _aj_;
          }
         }
        }
        else if(3 <= _ah_ && 2 === q[0] && ! q[1]){
         var _ak_ = q[2];
         if(2 === _ak_[0] && 2 === _ak_[1]){
          var _al_ = q[3];
          if(2 === _al_[0] && 2 === _al_[1]){
           var
            p3 = _al_[3],
            q3 = _al_[2],
            q2$0 = _ak_[3],
            p2$0 = _ak_[2],
            q1$0 = p[3],
            p1$0 = p[2],
            _am_ = caml_equal(p1$0, p2$0);
           if(_am_){
            var _an_ = caml_equal(p2$0, p3);
            if(_an_)
             var
              _ao_ = caml_equal(q1$0, q2$0),
              _ap_ = _ao_ ? caml_equal(q2$0, q3) : _ao_;
            else
             var _ap_ = _an_;
           }
           else
            var _ap_ = _am_;
           return _ap_;
          }
         }
        }
       }
       var _af_ = 0;
      }
     }
     return _af_;
    }
    return is_equivalent(pattern, p, q);
   }
   function idempotence(p, q){
    function pattern(p, q){
     if(2 === p[0] && 2 > p[1]){
      var p2 = p[3], p1 = p[2];
      if(caml_equal(p1, p2)) return caml_equal(p1, q);
     }
     return 0;
    }
    return is_equivalent(pattern, p, q);
   }
   function commutative(p, q){
    function pattern(p, q){
     if(2 === p[0]){
      var conn1 = p[1];
      if(2 !== conn1 && 2 === q[0]){
       var conn2 = q[1], q1 = p[3], p1 = p[2];
       if(2 !== conn2){
        var p2 = q[3], q2 = q[2], _ab_ = conn1 === conn2 ? 1 : 0;
        if(_ab_)
         var
          _ac_ = caml_equal(p1, p2),
          _ad_ = _ac_ ? caml_equal(q1, q2) : _ac_;
        else
         var _ad_ = _ab_;
        return _ad_;
       }
      }
     }
     return 0;
    }
    return is_equivalent(pattern, p, q);
   }
   function associative(p, q){
    function pattern(p, q){
     if(2 === p[0]){
      var _S_ = p[1];
      if(1 === _S_){
       var _T_ = p[2];
       if(2 === _T_[0] && 1 === _T_[1] && 2 === q[0] && 1 === q[1]){
        var _U_ = q[3];
        if(2 === _U_[0] && 1 === _U_[1]){
         var
          r2 = _U_[3],
          q2 = _U_[2],
          p2 = q[2],
          r1 = p[3],
          q1 = _T_[3],
          p1 = _T_[2],
          _V_ = caml_equal(p1, p2);
         if(_V_)
          var _W_ = caml_equal(q1, q2), _X_ = _W_ ? caml_equal(r1, r2) : _W_;
         else
          var _X_ = _V_;
         return _X_;
        }
       }
      }
      else if(! _S_){
       var _Y_ = p[2];
       if(2 === _Y_[0] && ! _Y_[1] && 2 === q[0] && ! q[1]){
        var _Z_ = q[3];
        if(2 === _Z_[0] && ! _Z_[1]){
         var
          r2$0 = _Z_[3],
          q2$0 = _Z_[2],
          p2$0 = q[2],
          r1$0 = p[3],
          q1$0 = _Y_[3],
          p1$0 = _Y_[2],
          ___ = caml_equal(p1$0, p2$0);
         if(___)
          var
           _$_ = caml_equal(q1$0, q2$0),
           _aa_ = _$_ ? caml_equal(r1$0, r2$0) : _$_;
         else
          var _aa_ = ___;
         return _aa_;
        }
       }
      }
     }
     return 0;
    }
    return is_equivalent(pattern, p, q);
   }
   function distributive(p, q){
    function pattern(p, q){
     a:
     if(2 === p[0]){
      var _x_ = p[1];
      if(1 === _x_){
       var _y_ = p[2], _z_ = p[3];
       b:
       {
        if(2 === _z_[0] && ! _z_[1]){
         if(2 !== q[0]) break a;
         if(q[1]) break a;
         var _G_ = q[2];
         if(2 !== _G_[0]) break a;
         if(1 !== _G_[1]) break a;
         var _H_ = q[3];
         if(2 !== _H_[0]) break a;
         if(1 !== _H_[1]) break a;
         var
          r2 = _H_[3],
          p3 = _H_[2],
          q2 = _G_[3],
          p2 = _G_[2],
          r1 = _z_[3],
          q1 = _z_[2],
          p1 = _y_;
         break b;
        }
        if(2 !== _y_[0]) break a;
        if(_y_[1]) break a;
        if(2 !== q[0]) break a;
        if(q[1]) break a;
        var _A_ = q[2];
        if(2 !== _A_[0]) break a;
        if(1 !== _A_[1]) break a;
        var _B_ = q[3];
        if(2 !== _B_[0]) break a;
        if(1 !== _B_[1]) break a;
        var
         r2 = _B_[3],
         p3 = _B_[2],
         q2 = _A_[3],
         p2 = _A_[2],
         r1 = _y_[3],
         q1 = _y_[2],
         p1 = p[3];
       }
       var _C_ = caml_equal(p1, p2);
       if(_C_){
        var _D_ = caml_equal(p2, p3);
        if(_D_)
         var _E_ = caml_equal(q1, q2), _F_ = _E_ ? caml_equal(r1, r2) : _E_;
        else
         var _F_ = _D_;
       }
       else
        var _F_ = _C_;
       return _F_;
      }
      if(! _x_){
       var _I_ = p[2], _J_ = p[3];
       b:
       {
        if(2 === _J_[0] && 1 === _J_[1]){
         if(2 !== q[0]) break a;
         if(1 !== q[1]) break a;
         var _Q_ = q[2];
         if(2 !== _Q_[0]) break a;
         if(_Q_[1]) break a;
         var _R_ = q[3];
         if(2 !== _R_[0]) break a;
         if(_R_[1]) break a;
         var
          r2$0 = _R_[3],
          p3$0 = _R_[2],
          q2$0 = _Q_[3],
          p2$0 = _Q_[2],
          r1$0 = _J_[3],
          q1$0 = _J_[2],
          p1$0 = _I_;
         break b;
        }
        if(2 !== _I_[0]) break a;
        if(1 !== _I_[1]) break a;
        if(2 !== q[0]) break a;
        if(1 !== q[1]) break a;
        var _K_ = q[2];
        if(2 !== _K_[0]) break a;
        if(_K_[1]) break a;
        var _L_ = q[3];
        if(2 !== _L_[0]) break a;
        if(_L_[1]) break a;
        var
         r2$0 = _L_[3],
         p3$0 = _L_[2],
         q2$0 = _K_[3],
         p2$0 = _K_[2],
         r1$0 = _I_[3],
         q1$0 = _I_[2],
         p1$0 = p[3];
       }
       var _M_ = caml_equal(p1$0, p2$0);
       if(_M_){
        var _N_ = caml_equal(p2$0, p3$0);
        if(_N_)
         var
          _O_ = caml_equal(q1$0, q2$0),
          _P_ = _O_ ? caml_equal(r1$0, r2$0) : _O_;
        else
         var _P_ = _N_;
       }
       else
        var _P_ = _M_;
       return _P_;
      }
     }
     return 0;
    }
    return is_equivalent(pattern, p, q);
   }
   function doublenegation(p, q){
    function pattern(p, q){
     if(3 === p[0]){
      var match = p[1];
      if(3 === match[0]){var p1 = match[1]; return caml_equal(p1, q);}
     }
     return 0;
    }
    return is_equivalent(pattern, p, q);
   }
   function demorgan(p, q){
    function pattern(p, q){
     if(3 === p[0]){
      var _s_ = p[1];
      if(2 === _s_[0]){
       var conn1 = _s_[1];
       if(2 > conn1 && 2 === q[0]){
        var conn2 = q[1], q1 = _s_[3], p1 = _s_[2];
        if(2 > conn2){
         var _t_ = q[2];
         if(3 === _t_[0]){
          var match = q[3];
          if(3 === match[0]){
           var q2 = match[1], p2 = _t_[1], _u_ = conn1 !== conn2 ? 1 : 0;
           if(_u_)
            var
             _v_ = caml_equal(p1, p2),
             _w_ = _v_ ? caml_equal(q1, q2) : _v_;
           else
            var _w_ = _u_;
           return _w_;
          }
         }
        }
       }
      }
     }
     return 0;
    }
    return is_equivalent(pattern, p, q);
   }
   function identity(p, q){
    function pattern(p, p2){
     a:
     if(2 === p[0]){
      var _m_ = p[1];
      if(1 === _m_){
       var _n_ = p[2];
       b:
       {
        if(1 === _n_[0] && ! _n_[1]){var p1 = p[3]; break b;}
        var _o_ = p[3];
        if(1 !== _o_[0]) break a;
        if(_o_[1]) break a;
        var p1 = _n_;
       }
       var p1$0 = p1;
      }
      else{
       if(_m_) break a;
       var _p_ = p[2];
       b:
       {
        if(1 === _p_[0] && _p_[1]){var _r_ = p[3]; break b;}
        var _q_ = p[3];
        if(1 !== _q_[0]) break a;
        if(! _q_[1]) break a;
        var _r_ = _p_;
       }
       var p1$0 = _r_;
      }
      return caml_equal(p1$0, p2);
     }
     return 0;
    }
    return is_equivalent(pattern, p, q);
   }
   function dominance(p, q){
    function pattern(p, q){
     a:
     if(2 === p[0]){
      var _h_ = p[1];
      if(1 === _h_){
       var _i_ = p[2];
       b:
       {
        if(1 === _i_[0] && _i_[1]) break b;
        var _j_ = p[3];
        if(1 !== _j_[0] || ! _j_[1]) break a;
       }
       if(1 !== q[0] || ! q[1]) break a;
      }
      else{
       if(_h_) break a;
       var _k_ = p[2];
       b:
       {
        if(1 === _k_[0] && ! _k_[1]) break b;
        var _l_ = p[3];
        if(1 !== _l_[0] || _l_[1]) break a;
       }
       if(1 !== q[0] || q[1]) break a;
      }
      return 1;
     }
     return 0;
    }
    return is_equivalent(pattern, p, q);
   }
   function contradiction(p, q){
    function pattern(p, q){
     a:
     if(2 === p[0] && ! p[1]){
      var p1 = p[2];
      if(3 === p1[0]){
       if(1 !== q[0]) break a;
       if(q[1]) break a;
       var p2$0 = p[3], p1$0 = p1[1];
       if(caml_equal(p1$0, p2$0)) return 1;
      }
      var _g_ = p[3];
      if(3 === _g_[0] && 1 === q[0] && ! q[1]){
       var p2 = _g_[1];
       if(caml_equal(p1, p2)) return 1;
      }
     }
     return 0;
    }
    return is_equivalent(pattern, p, q);
   }
   function tautology(p, q){
    function pattern(p, q){
     a:
     if(2 === p[0] && 1 === p[1]){
      var p1 = p[2];
      if(3 === p1[0]){
       if(1 !== q[0]) break a;
       if(! q[1]) break a;
       var p2$0 = p[3], p1$0 = p1[1];
       if(caml_equal(p1$0, p2$0)) return 1;
      }
      var _f_ = p[3];
      if(3 === _f_[0] && 1 === q[0] && q[1]){
       var p2 = _f_[1];
       if(caml_equal(p1, p2)) return 1;
      }
     }
     return 0;
    }
    return is_equivalent(pattern, p, q);
   }
   function modusponens(p1, p2, q){
    function pattern(p1, p2, q){
     if(2 === p1[0] && 2 === p1[1]){
      var
       q1 = p1[3],
       p1$0 = p1[2],
       _d_ = caml_equal(p1$0, p2),
       _e_ = _d_ ? caml_equal(q1, q) : _d_;
      return _e_;
     }
     return 0;
    }
    return is_implication(pattern, p1, p2, q);
   }
   function modustollens(p1, p2, q){
    function pattern(p1, p2, q){
     if(2 === p1[0] && 2 === p1[1] && 3 === p2[0]){
      var
       p2$0 = p2[1],
       p1$0 = p1[3],
       q1 = p1[2],
       _b_ = caml_equal(p1$0, p2$0),
       _c_ = _b_ ? caml_equal(q1, [3, q]) : _b_;
      return _c_;
     }
     return 0;
    }
    return is_implication(pattern, p1, p2, q);
   }
   function validate(param){
    switch(param[0]){
      case 0:
       var p = param[1]; return p;
      case 1:
       var q = param[3], p$0 = param[2], rule = param[1];
       return caml_call2(rule, validate(p$0), q);
      case 2:
       var
        q$0 = param[4],
        p2 = param[3],
        p1 = param[2],
        rule$0 = param[1],
        _a_ = validate(p2);
       return caml_call3(rule$0, validate(p1), _a_, q$0);
      default: return caml_call1(Stdlib[2], cst_Precondition_violated);
    }
   }
   var
    Interp_Rules =
      [0,
       Invalid,
       not_equivalent,
       not_implied,
       is_equivalent,
       check_equivelence,
       is_implication,
       check_implication,
       le,
       idempotence,
       commutative,
       associative,
       distributive,
       doublenegation,
       demorgan,
       identity,
       dominance,
       contradiction,
       tautology,
       modusponens,
       modustollens,
       validate];
   runtime.caml_register_global(8, Interp_Rules, "Interp__Rules");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Parser
//# unitInfo: Requires: Interp__Rules, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printf = global_data.Stdlib__Printf,
    Assert_failure = global_data.Assert_failure,
    Interp_Rules = global_data.Interp__Rules,
    Error =
      [248, "Interp__Parser.MenhirBasics.Error", runtime.caml_fresh_oo_id(0)],
    _a_ =
      [0,
       [11,
        "Internal failure -- please contact the parser generator's developers.\n",
        [10, 0]],
       "Internal failure -- please contact the parser generator's developers.\n%!"],
    _b_ = [0, "src/parser.ml", 362, 4];
   function eRR(s){throw caml_maybe_attach_backtrace(Error, 1);}
   function menhir_run_16(menhir_stack$1, menhir_s$1){
    var menhir_stack = menhir_stack$1, v = 0, menhir_s = menhir_s$1;
    for(;;){
     if(! menhir_s) return v;
     if(7 > menhir_s){
      caml_call1(Stdlib_Printf[3], _a_);
      throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
     }
     var
      h = menhir_stack[3],
      menhir_s$0 = menhir_stack[2],
      menhir_stack$0 = menhir_stack[1],
      v$0 = [0, h, v],
      menhir_stack = menhir_stack$0,
      v = v$0,
      menhir_s = menhir_s$0;
    }
   }
   function menhir_run_01$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var menhir_stack$0 = menhir_stack, menhir_s$0 = menhir_s;
    for(;;){
     var
      menhir_stack$1 = [0, menhir_stack$0, menhir_s$0],
      tok = caml_call1(menhir_lexer, menhir_lexbuf),
      menhir_s$1 = 1;
     if(typeof tok === "number")
      switch(tok){
        case 4:
         var menhir_stack$0 = menhir_stack$1, menhir_s$0 = menhir_s$1;
         continue;
        case 7:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_02$0,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
         var counter$2 = counter + 1 | 0;
         return menhir_run_02$0
                 (counter$2,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$1);
      }
     else
      switch(tok[0]){
        case 1:
         var v = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_03$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v,
                    menhir_s$1]);
         var counter$1 = counter + 1 | 0;
         return menhir_run_03$0
                 (counter$1,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s$1);
        case 2:
         var v$0 = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_04$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s$1]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_04$0
                 (counter$0,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s$1);
      }
     return eRR(0);
    }
   }
   function menhir_run_02$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var menhir_stack$0 = menhir_stack, menhir_s$0 = menhir_s;
    for(;;){
     var
      menhir_stack$1 = [0, menhir_stack$0, menhir_s$0],
      tok = caml_call1(menhir_lexer, menhir_lexbuf),
      menhir_s$1 = 2;
     if(typeof tok === "number")
      switch(tok){
        case 4:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_01$0,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
         var counter$2 = counter + 1 | 0;
         return menhir_run_01$0
                 (counter$2,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$1);
        case 7:
         var menhir_stack$0 = menhir_stack$1, menhir_s$0 = menhir_s$1;
         continue;
      }
     else
      switch(tok[0]){
        case 1:
         var v = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_03$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v,
                    menhir_s$1]);
         var counter$1 = counter + 1 | 0;
         return menhir_run_03$0
                 (counter$1,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s$1);
        case 2:
         var v$0 = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_04$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s$1]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_04$0
                 (counter$0,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s$1);
      }
     return eRR(0);
    }
   }
   function menhir_run_03$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, b, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [1, b];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_prop,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_prop
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_goto_prop
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v$3, menhir_s, tok){
    var
     menhir_stack$0 = menhir_stack,
     p2 = v$3,
     menhir_s$0 = menhir_s,
     tok$0 = tok;
    for(;;)
     a:
     switch(menhir_s$0){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_17,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   p2,
                   menhir_s$0,
                   tok$0]);
        var counter$11 = counter + 1 | 0;
        return menhir_run_17
                (counter$11,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 p2,
                 menhir_s$0,
                 tok$0);
       case 1:
        var
         menhir_s$1 = menhir_stack$0[2],
         menhir_stack$1 = menhir_stack$0[1],
         v$4 = [3, p2],
         menhir_stack$0 = menhir_stack$1,
         p2 = v$4,
         menhir_s$0 = menhir_s$1;
        break;
       case 2:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 1:
            var
             tok$1 = caml_call1(menhir_lexer, menhir_lexbuf),
             menhir_s$6 = menhir_stack$0[2],
             menhir_stack$13 = menhir_stack$0[1],
             menhir_stack$0 = menhir_stack$13,
             menhir_s$0 = menhir_s$6,
             tok$0 = tok$1;
            break a;
           case 3:
            var menhir_stack$14 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$14, menhir_lexbuf, menhir_lexer]);
            var counter$10 = counter + 1 | 0;
            return menhir_run_07
                    (counter$10, menhir_stack$14, menhir_lexbuf, menhir_lexer);
           case 9:
            var menhir_stack$15 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$15, menhir_lexbuf, menhir_lexer]);
            var counter$6 = counter + 1 | 0;
            return menhir_run_09
                    (counter$6, menhir_stack$15, menhir_lexbuf, menhir_lexer);
           case 10:
            var menhir_stack$16 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_13,
                      [0, menhir_stack$16, menhir_lexbuf, menhir_lexer]);
            var counter$3 = counter + 1 | 0;
            return menhir_run_13
                    (counter$3, menhir_stack$16, menhir_lexbuf, menhir_lexer);
           case 22:
            var menhir_stack$17 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_11,
                      [0, menhir_stack$17, menhir_lexbuf, menhir_lexer]);
            var counter$2 = counter + 1 | 0;
            return menhir_run_11
                    (counter$2, menhir_stack$17, menhir_lexbuf, menhir_lexer);
         }
        return eRR(0);
       case 3:
        var
         p1$2 = menhir_stack$0[3],
         menhir_s$5 = menhir_stack$0[2],
         menhir_stack$12 = menhir_stack$0[1],
         v = [2, 1, p1$2, p2],
         menhir_stack$0 = menhir_stack$12,
         p2 = v,
         menhir_s$0 = menhir_s$5;
        break;
       case 4:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 3:
            var menhir_stack$9 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$9, menhir_lexbuf, menhir_lexer]);
            var counter$9 = counter + 1 | 0;
            return menhir_run_07
                    (counter$9, menhir_stack$9, menhir_lexbuf, menhir_lexer);
           case 9:
            var menhir_stack$10 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$10, menhir_lexbuf, menhir_lexer]);
            var counter$5 = counter + 1 | 0;
            return menhir_run_09
                    (counter$5, menhir_stack$10, menhir_lexbuf, menhir_lexer);
           case 22:
            var menhir_stack$11 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_11,
                      [0, menhir_stack$11, menhir_lexbuf, menhir_lexer]);
            var counter$1 = counter + 1 | 0;
            return menhir_run_11
                    (counter$1, menhir_stack$11, menhir_lexbuf, menhir_lexer);
           case 4:
           case 7:
           case 13:
           case 19: break;
           default:
            var
             p1$1 = menhir_stack$0[3],
             menhir_s$4 = menhir_stack$0[2],
             menhir_stack$8 = menhir_stack$0[1],
             v$1 = [2, 2, p1$1, p2],
             menhir_stack$0 = menhir_stack$8,
             p2 = v$1,
             menhir_s$0 = menhir_s$4;
            break a;
         }
        return eRR(0);
       case 5:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 3:
            var menhir_stack$7 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$7, menhir_lexbuf, menhir_lexer]);
            var counter$8 = counter + 1 | 0;
            return menhir_run_07
                    (counter$8, menhir_stack$7, menhir_lexbuf, menhir_lexer);
           case 4:
           case 7:
           case 13:
           case 19: break;
           default:
            var
             p1$0 = menhir_stack$0[3],
             menhir_s$3 = menhir_stack$0[2],
             menhir_stack$6 = menhir_stack$0[1],
             v$0 = [2, 0, p1$0, p2],
             menhir_stack$0 = menhir_stack$6,
             p2 = v$0,
             menhir_s$0 = menhir_s$3;
            break a;
         }
        return eRR(0);
       case 6:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 3:
            var menhir_stack$3 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$3, menhir_lexbuf, menhir_lexer]);
            var counter$7 = counter + 1 | 0;
            return menhir_run_07
                    (counter$7, menhir_stack$3, menhir_lexbuf, menhir_lexer);
           case 9:
            var menhir_stack$4 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$4, menhir_lexbuf, menhir_lexer]);
            var counter$4 = counter + 1 | 0;
            return menhir_run_09
                    (counter$4, menhir_stack$4, menhir_lexbuf, menhir_lexer);
           case 22:
            var menhir_stack$5 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_11,
                      [0, menhir_stack$5, menhir_lexbuf, menhir_lexer]);
            var counter$0 = counter + 1 | 0;
            return menhir_run_11
                    (counter$0, menhir_stack$5, menhir_lexbuf, menhir_lexer);
           case 4:
           case 7:
           case 13:
           case 19: break;
           default:
            var
             p1 = menhir_stack$0[3],
             menhir_s$2 = menhir_stack$0[2],
             menhir_stack$2 = menhir_stack$0[1],
             v$2 = [2, 3, p1, p2],
             menhir_stack$0 = menhir_stack$2,
             p2 = v$2,
             menhir_s$0 = menhir_s$2;
            break a;
         }
        return eRR(0);
       default:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_17,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   p2,
                   menhir_s$0,
                   tok$0]);
        var counter$12 = counter + 1 | 0;
        return menhir_run_17
                (counter$12,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 p2,
                 menhir_s$0,
                 tok$0);
     }
   }
   function menhir_run_17
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v$12, menhir_s, tok){
    if(typeof tok === "number")
     switch(tok){
       case 0:
        var tok$0 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$0 !== "number" && 0 === tok$0[0]){
         var
          v_0 = tok$0[1],
          tok$1 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$9 = [1, Interp_Rules[18], [3, v_0], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$9,
                    menhir_s,
                    tok$1]);
         var counter$17 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$17,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$9,
                  menhir_s,
                  tok$1);
        }
        return eRR(0);
       case 2:
        var tok$2 = caml_call1(menhir_lexer, menhir_lexbuf), v$13 = [0, v$12];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_goto_expr,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$13,
                   menhir_s,
                   tok$2]);
        var counter$4 = counter + 1 | 0;
        return menhir_goto_expr
                (counter$4,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$13,
                 menhir_s,
                 tok$2);
       case 3:
        var menhir_stack$0 = [0, menhir_stack, menhir_s, v$12];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_07,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_07
                (counter$3, menhir_stack$0, menhir_lexbuf, menhir_lexer);
       case 5:
        var tok$3 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$3 !== "number" && 0 === tok$3[0]){
         var v_1 = tok$3[1], tok$4 = caml_call1(menhir_lexer, menhir_lexbuf);
         if(typeof tok$4 === "number" && 19 === tok$4){
          var tok$5 = caml_call1(menhir_lexer, menhir_lexbuf);
          if(typeof tok$5 !== "number" && 0 === tok$5[0]){
           var
            v_2 = tok$5[1],
            tok$6 = caml_call1(menhir_lexer, menhir_lexbuf),
            v$11 = [2, Interp_Rules[20], [3, v_1], [3, v_2], v$12];
           if(counter >= 50)
            return caml_trampoline_return
                    (menhir_goto_expr,
                     [0,
                      menhir_stack,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$11,
                      menhir_s,
                      tok$6]);
           var counter$16 = counter + 1 | 0;
           return menhir_goto_expr
                   (counter$16,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$11,
                    menhir_s,
                    tok$6);
          }
          return eRR(0);
         }
         return eRR(0);
        }
        return eRR(0);
       case 6:
        var tok$7 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$7 !== "number" && 0 === tok$7[0]){
         var v_3 = tok$7[1], tok$8 = caml_call1(menhir_lexer, menhir_lexbuf);
         if(typeof tok$8 === "number" && 19 === tok$8){
          var tok$9 = caml_call1(menhir_lexer, menhir_lexbuf);
          if(typeof tok$9 !== "number" && 0 === tok$9[0]){
           var
            v_4 = tok$9[1],
            tok$10 = caml_call1(menhir_lexer, menhir_lexbuf),
            v$10 = [2, Interp_Rules[19], [3, v_3], [3, v_4], v$12];
           if(counter >= 50)
            return caml_trampoline_return
                    (menhir_goto_expr,
                     [0,
                      menhir_stack,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$10,
                      menhir_s,
                      tok$10]);
           var counter$15 = counter + 1 | 0;
           return menhir_goto_expr
                   (counter$15,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$10,
                    menhir_s,
                    tok$10);
          }
          return eRR(0);
         }
         return eRR(0);
        }
        return eRR(0);
       case 8:
        var tok$11 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$11 !== "number" && 0 === tok$11[0]){
         var
          v_5 = tok$11[1],
          tok$12 = caml_call1(menhir_lexer, menhir_lexbuf),
          v = [1, Interp_Rules[8], [3, v_5], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v,
                    menhir_s,
                    tok$12]);
         var counter$14 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$14,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok$12);
        }
        return eRR(0);
       case 9:
        var menhir_stack$1 = [0, menhir_stack, menhir_s, v$12];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_09,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_09
                (counter$2, menhir_stack$1, menhir_lexbuf, menhir_lexer);
       case 10:
        var menhir_stack$2 = [0, menhir_stack, menhir_s, v$12];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_13,
                  [0, menhir_stack$2, menhir_lexbuf, menhir_lexer]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_13
                (counter$1, menhir_stack$2, menhir_lexbuf, menhir_lexer);
       case 11:
        var tok$13 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$13 !== "number" && 0 === tok$13[0]){
         var
          v_6 = tok$13[1],
          tok$14 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$0 = [1, Interp_Rules[9], [3, v_6], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s,
                    tok$14]);
         var counter$13 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$13,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s,
                  tok$14);
        }
        return eRR(0);
       case 12:
        var tok$15 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$15 !== "number" && 0 === tok$15[0]){
         var
          v_7 = tok$15[1],
          tok$16 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$6 = [1, Interp_Rules[15], [3, v_7], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$6,
                    menhir_s,
                    tok$16]);
         var counter$12 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$12,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$6,
                  menhir_s,
                  tok$16);
        }
        return eRR(0);
       case 14:
        var tok$17 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$17 !== "number" && 0 === tok$17[0]){
         var
          v_8 = tok$17[1],
          tok$18 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$7 = [1, Interp_Rules[16], [3, v_8], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$7,
                    menhir_s,
                    tok$18]);
         var counter$11 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$11,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$7,
                  menhir_s,
                  tok$18);
        }
        return eRR(0);
       case 15:
        var tok$19 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$19 !== "number" && 0 === tok$19[0]){
         var
          v_9 = tok$19[1],
          tok$20 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$4 = [1, Interp_Rules[13], [3, v_9], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$4,
                    menhir_s,
                    tok$20]);
         var counter$10 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$10,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$4,
                  menhir_s,
                  tok$20);
        }
        return eRR(0);
       case 16:
        var tok$21 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$21 !== "number" && 0 === tok$21[0]){
         var
          v_10 = tok$21[1],
          tok$22 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$5 = [1, Interp_Rules[14], [3, v_10], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$5,
                    menhir_s,
                    tok$22]);
         var counter$9 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$9,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$5,
                  menhir_s,
                  tok$22);
        }
        return eRR(0);
       case 17:
        var tok$23 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$23 !== "number" && 0 === tok$23[0]){
         var
          v_11 = tok$23[1],
          tok$24 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$3 = [1, Interp_Rules[12], [3, v_11], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$3,
                    menhir_s,
                    tok$24]);
         var counter$8 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$8,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$3,
                  menhir_s,
                  tok$24);
        }
        return eRR(0);
       case 18:
        var tok$25 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$25 !== "number" && 0 === tok$25[0]){
         var
          v_12 = tok$25[1],
          tok$26 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$8 = [1, Interp_Rules[17], [3, v_12], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$8,
                    menhir_s,
                    tok$26]);
         var counter$7 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$7,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$8,
                  menhir_s,
                  tok$26);
        }
        return eRR(0);
       case 20:
        var tok$27 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$27 !== "number" && 0 === tok$27[0]){
         var
          v_13 = tok$27[1],
          tok$28 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$1 = [1, Interp_Rules[10], [3, v_13], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$1,
                    menhir_s,
                    tok$28]);
         var counter$6 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$6,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$1,
                  menhir_s,
                  tok$28);
        }
        return eRR(0);
       case 21:
        var tok$29 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$29 !== "number" && 0 === tok$29[0]){
         var
          v_14 = tok$29[1],
          tok$30 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$2 = [1, Interp_Rules[11], [3, v_14], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$2,
                    menhir_s,
                    tok$30]);
         var counter$5 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$5,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$2,
                  menhir_s,
                  tok$30);
        }
        return eRR(0);
       case 22:
        var menhir_stack$3 = [0, menhir_stack, menhir_s, v$12];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_11,
                  [0, menhir_stack$3, menhir_lexbuf, menhir_lexer]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_11
                (counter$0, menhir_stack$3, menhir_lexbuf, menhir_lexer);
     }
    return eRR(0);
   }
   function menhir_goto_expr
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok === "number")
     switch(tok){
       case 4:
        var _c_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _c_]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3, menhir_stack$0, menhir_lexbuf, menhir_lexer, _c_);
       case 7:
        var _d_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _d_]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2, menhir_stack$0, menhir_lexbuf, menhir_lexer, _d_);
       case 13:
        return menhir_run_16(menhir_stack$0, 7);
     }
    else
     switch(tok[0]){
       case 1:
        var v_0 = tok[1], _e_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_0, _e_]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_0,
                 _e_);
       case 2:
        var v_1 = tok[1], _f_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_1, _f_]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_1,
                 _f_);
     }
    return eRR(0);
   }
   function menhir_run_04$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, a, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, a];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_prop,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_prop
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_07(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 3;
    if(typeof tok === "number")
     switch(tok){
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_09(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 4;
    if(typeof tok === "number")
     switch(tok){
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_13(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 6;
    if(typeof tok === "number")
     switch(tok){
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_11(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 5;
    if(typeof tok === "number")
     switch(tok){
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_01(menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_01$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_02(menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_02$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_03
   (menhir_stack, menhir_lexbuf, menhir_lexer, b, menhir_s){
    return caml_trampoline
            (menhir_run_03$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, b, menhir_s));
   }
   function menhir_run_04
   (menhir_stack, menhir_lexbuf, menhir_lexer, a, menhir_s){
    return caml_trampoline
            (menhir_run_04$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, a, menhir_s));
   }
   function prog(menhir_lexer, menhir_lexbuf){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_stack = 0,
     menhir_s = 0;
    if(typeof tok === "number")
     switch(tok){
       case 4:
        return menhir_run_01
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
       case 7:
        return menhir_run_02
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
       case 13:
        return menhir_run_16(menhir_stack, menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        return menhir_run_03
                (menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s);
       case 2:
        var v$0 = tok[1];
        return menhir_run_04
                (menhir_stack, menhir_lexbuf, menhir_lexer, v$0, menhir_s);
     }
    return eRR(0);
   }
   var Interp_Parser = [0, Error, prog];
   runtime.caml_register_global(32, Interp_Parser, "Interp__Parser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Lexer
//# unitInfo: Requires: Stdlib, Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       "\0\0\xe3\xff\xe4\xff+\x003\0\n\x004\0@\0\0\x003\0\xf3\xffV\0\x01\0\0\0\xf7\xff\x02\0\x0b\0\xfa\xffO\0\xfc\xff\xfd\xff\xfe\xff\x02\0\x1c\0\xe7\xff\x1e\0$\0(\0&\0/\0\x1e\0\xf9\xff\xf8\xff\xf6\xff\x01\0\xf5\xff4\0\xf2\xff.\x004\0+\0:\0\xf1\xff;\0\x01\0\xf0\xff9\0-\x008\0:\x006\0F\0>\0J\0I\0F\0=\x009\0\xea\xffF\0\x04\0\xe8\xff\xef\xffA\0I\0B\0D\0X\0F\0R\0F\0X\0L\0^\0\\\0X\0_\0O\0[\0V\0X\0T\0\0\0\xee\xffY\0f\0a\0j\0X\0d\0X\0j\0\xe9\xff\x06\0\xeb\xffc\0\xec\xff^\0\x02\0\xed\xff^\0a\0k\0s\0a\0c\0p\0d\0v\0s\0{\0r\0z\0\b\0{\0z\0\x81\0o\0{\0v\0x\0y\0\x87\0{\0\x87\0\x86\0}\0{\0\x87\0\x8e\0\x82\0~\0\xe5\xff\x8e\0\xe6\xff~\0\x81\0\x01\0\x07\0\x86\0\x87\0\x89\0\x93\0\x8b\0\x87\0\x8f\0\x97\0\x8f\0\x8b\0",
       "\xff\xff\xff\xff\xff\xff\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\xff\xff\x0b\0\x1b\0\x1b\0\xff\xff\x1b\0\x1b\0\xff\xff\x04\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\x18\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x15\0\xff\xff\xff\xff\xff\xff\x0f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17\0\xff\xff\xff\xff\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\xff\xff\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\x02\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\0\x16\0\x16\0\x16\0\x16\0\0\0\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\0\x8a\0\x16\0\0\0\0\0\0\0\0\0\0\0\x14\0\x13\0\0\0\0\0\n\0\r\0\"\0\x0f\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x1f\0\0\0\f\0\0\0!\0#\0\0\0\x05\0\0\0\x06\0\x04\0*\0\x11\0\0\0\0\0\x07\0\0\0\0\0\b\0\x03\0-\0S\0\t\0>\0=\0~\0\x12\0c\0r\0\x8c\0\0\0\0\0\0\0\x8b\0\x10\0R\0 \0\0\0\0\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x86\0b\0Q\0\x0e\0\x84\0^\0`\0\\\0<\0,\0%\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x18\0\x19\0\x1a\0\x1b\0\x1c\0\x1d\0\x1e\0\x18\0]\0&\0\x85\0'\0a\0(\0)\0%\0.\x007\0_\0;\0+\0$\x000\0/\x001\x002\x003\x004\x005\x006\0-\x008\0\x17\x009\0:\0@\0?\0H\0A\0B\0C\0D\0E\0F\0G\0>\0I\0J\0K\0L\0M\0N\0O\0P\0=\0T\0U\0V\0W\0X\0Y\0Z\0[\0S\0m\0d\0e\0f\0g\0h\0i\0j\0n\0k\0l\0c\0y\0o\0p\0q\0s\0t\0u\0v\0w\0x\0`\0z\0{\0|\0}\0\\\0\x7f\0\x80\0\x81\0\x82\0\x83\0^\0\x87\0\x88\0\x89\0\x91\0\x8d\0\x8e\0\x8f\0\x90\0\x86\0\x92\0\x93\0\x94\0\x84\0\0\0\x
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x16\0\x16\0\0\0\xff\xff\x16\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x89\0\x16\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\xff\xff\0\0\xff\xff\r\0\"\0\xff\xff\0\0\xff\xff\0\0\0\0\b\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0,\0R\0\0\0<\0<\0]\0\0\0b\0q\0\x8a\0\xff\xff\xff\xff\xff\xff\x8a\0\0\0\x05\0\x0f\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\x05\0\0\0\x03\0\x04\0\x04\0\x04\0\x06\0\x07\0\t\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x12\0\x17\0\x19\0\x1a\0\x1b\0\x1c\0\x1d\0\x1e\0\x04\0$\0\x03\0&\0\x04\0'\0(\0)\0+\0/\0\x04\0\x06\0\x07\0\t\0.\0.\x000\x001\x002\x003\x004\x005\x006\x007\0\x12\x008\x009\0;\0;\0?\0@\0A\0B\0C\0D\0E\0F\0G\0H\0I\0J\0K\0L\0M\0N\0O\0P\0Q\0T\0U\0V\0W\0X\0Y\0Z\0[\0_\0a\0d\0e\0f\0g\0h\0i\0_\0j\0k\0l\0m\0n\0o\0p\0r\0s\0t\0u\0v\0w\0x\0y\0z\0{\0|\0}\0~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x85\0\x87\0\x88\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\x94\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Stdlib = global_data.Stdlib,
    SyntaxError =
      [248, "Interp__Lexer.SyntaxError", runtime.caml_fresh_oo_id(0)],
    _a_ = [1, 1],
    _b_ = [1, 0],
    cst_Unexpected_character = "Unexpected character: ";
   function read$0(counter, lexbuf){
    var _d_ = 0;
    if(counter >= 50)
     return caml_trampoline_return(ocaml_lex_read_rec$0, [0, lexbuf, _d_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_read_rec$0(counter$0, lexbuf, _d_);
   }
   function ocaml_lex_read_rec$0(counter, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(28 >= ocaml_lex_state$1 >>> 0)
      switch(ocaml_lex_state$1){
        case 0:
         if(counter >= 50) return caml_trampoline_return(read$0, [0, lexbuf]);
         var counter$0 = counter + 1 | 0;
         return read$0(counter$0, lexbuf);
        case 1:
         return [2, caml_call1(Stdlib_Lexing[8], lexbuf)];
        case 2:
         return 7;
        case 3:
         return 1;
        case 4:
         return _a_;
        case 5:
         return _b_;
        case 6:
         return 3;
        case 7:
         return 22;
        case 8:
         return 4;
        case 9:
         return 9;
        case 10:
         return 10;
        case 11:
         return [0,
                 runtime.caml_int_of_string
                  (caml_call1(Stdlib_Lexing[8], lexbuf))];
        case 12:
         return 19;
        case 13:
         return 2;
        case 14:
         return 8;
        case 15:
         return 11;
        case 16:
         return 20;
        case 17:
         return 21;
        case 18:
         return 17;
        case 19:
         return 15;
        case 20:
         return 16;
        case 21:
         return 12;
        case 22:
         return 14;
        case 23:
         return 18;
        case 24:
         return 0;
        case 25:
         return 6;
        case 26:
         return 5;
        case 27:
         var _c_ = caml_call1(Stdlib_Lexing[8], lexbuf);
         throw caml_maybe_attach_backtrace
                ([0,
                  SyntaxError,
                  caml_call2(Stdlib[28], cst_Unexpected_character, _c_)],
                 1);
        default: return 13;
      }
     caml_call1(lexbuf[1], lexbuf);
     var ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function read(lexbuf){return caml_trampoline(read$0(0, lexbuf));}
   function ocaml_lex_read_rec(lexbuf, ocaml_lex_state){
    return caml_trampoline(ocaml_lex_read_rec$0(0, lexbuf, ocaml_lex_state));
   }
   var
    Interp_Lexer =
      [0, SyntaxError, ocaml_lex_tables, read, ocaml_lex_read_rec];
   runtime.caml_register_global(7, Interp_Lexer, "Interp__Lexer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp
//# unitInfo: Requires: Interp__Ast, Interp__Lexer, Interp__Parser, Interp__Rules, Stdlib, Stdlib__Int, Stdlib__Lexing, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = "|-",
    cst = "",
    Interp_Rules = global_data.Interp__Rules,
    Interp_Ast = global_data.Interp__Ast,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Interp_Lexer = global_data.Interp__Lexer,
    Interp_Parser = global_data.Interp__Parser,
    Stdlib_Int = global_data.Stdlib__Int,
    SyntaxError = Interp_Lexer[1],
    ParserError = Interp_Parser[1],
    SelfRef = [248, "Interp.SelfRef", runtime.caml_fresh_oo_id(0)],
    cst_Precondition_violated = "Precondition violated",
    cst_cannot_refrence_itself = "cannot refrence itself",
    cst_Line = "Line ";
   function self_ref(linenum){
    var
     _j_ = caml_call1(Stdlib_Int[12], linenum),
     _k_ = caml_call2(Stdlib[28], _j_, cst_cannot_refrence_itself);
    throw caml_maybe_attach_backtrace
           ([0, SelfRef, caml_call2(Stdlib[28], cst_Line, _k_)], 1);
   }
   function interp(s){
    try{
     var
      _a_ = caml_call2(Stdlib_Lexing[3], 0, s),
      _b_ = caml_call1(caml_call1(Interp_Parser[2], Interp_Lexer[3]), _a_),
      lines = caml_call1(Stdlib_List[10], _b_),
      aux =
        function(length, lines, param){
         switch(param[0]){
           case 0:
            var p = param[1]; return [0, p];
           case 1:
            var match = param[2];
            if(3 === match[0]){
             var prop = param[3], i = match[1], rule = param[1];
             return 0 === i
                     ? self_ref(length)
                     : [1,
                       rule,
                       aux
                        (length,
                         lines,
                         caml_call2(Stdlib_List[8], lines, length - i | 0)),
                       prop];
            }
            break;
           case 2:
            var _h_ = param[2];
            if(3 === _h_[0]){
             var match$0 = param[3];
             if(3 === match$0[0]){
              var
               prop$0 = param[4],
               i2 = match$0[1],
               i1 = _h_[1],
               rule$0 = param[1];
              if(0 !== i1 && 0 !== i2){
               var
                _i_ =
                  aux
                   (length,
                    lines,
                    caml_call2(Stdlib_List[8], lines, length - i2 | 0));
               return [2,
                       rule$0,
                       aux
                        (length,
                         lines,
                         caml_call2(Stdlib_List[8], lines, length - i1 | 0)),
                       _i_,
                       prop$0];
              }
              return self_ref(length);
             }
            }
            break;
         }
         return caml_call1(Stdlib[2], cst_Precondition_violated);
        },
      _c_ = caml_call1(Stdlib_List[6], lines),
      _g_ = aux(caml_call1(Stdlib_List[1], lines), lines, _c_),
      _d_ = caml_call1(Interp_Rules[21], _g_),
      _e_ = caml_call1(Interp_Ast[3], _d_),
      _f_ = caml_call1(caml_call1(Stdlib[28], cst$0), _e_);
     return _f_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Interp_Rules[1]){var msg = exn[2]; return msg;}
     if(exn[1] === Stdlib[7]) return cst;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var Interp = [0, SyntaxError, ParserError, SelfRef, interp];
   runtime.caml_register_global(14, Interp, "Interp");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
