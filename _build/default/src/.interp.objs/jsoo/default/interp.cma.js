// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.5.2

//# unitInfo: Provides: Interp__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Interp = [0],
    Interp$0 = [0, Interp];
   runtime.caml_register_global(0, Interp$0, "Interp__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Ast
//# unitInfo: Requires: Stdlib, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_a = "%a",
    cst$9 = ")",
    cst$14 = "))",
    cst$13 = ",@ ",
    cst_2 = "<2>",
    cst_fun$1 = "<fun>",
    cst$10 = "@ ",
    cst$12 = "@,",
    cst$15 = "@,))@]",
    cst$11 = "@])",
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$9,
    cst$1 = "(",
    cst = " /\\ ",
    cst$2 = " \\/ ",
    cst$3 = " -> ",
    cst$4 = " <-> ",
    cst$6 = cst$9,
    cst$7 = "~(",
    cst$5 = "~",
    cst$8 = "|- ",
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    pp_prop = function _ab_(_$_, _aa_){return _ab_.fun(_$_, _aa_);},
    show_prop = function ___(_Z_){return ___.fun(_Z_);},
    cst_Ast_And = "Ast.And",
    cst_Ast_Or = "Ast.Or",
    cst_Ast_Impl = "Ast.Impl",
    cst_Ast_Iff = "Ast.Iff",
    cst_T = "T",
    cst_F = "F",
    cst_Precondition_violated = "Precondition violated",
    _B_ = [0, [15, 0], cst_a],
    cst_fun$0 = cst_fun$1,
    cst_fun = cst_fun$1,
    _n_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Premise", [17, [0, cst$10, 1, 0], 0]]]],
       "(@[<2>Ast.Premise@ "],
    _o_ = [0, [17, 0, [12, 41, 0]], cst$11],
    _p_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.EquivalenceRule (", [17, [0, cst$12, 0, 0], 0]]]],
       "(@[<2>Ast.EquivalenceRule (@,"],
    _q_ = [0, [12, 44, [17, [0, cst$10, 1, 0], 0]], cst$13],
    _r_ = [0, [12, 44, [17, [0, cst$10, 1, 0], 0]], cst$13],
    _s_ = [0, [17, [0, cst$12, 0, 0], [11, cst$14, [17, 0, 0]]], cst$15],
    _t_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.ImplicationRule (", [17, [0, cst$12, 0, 0], 0]]]],
       "(@[<2>Ast.ImplicationRule (@,"],
    _u_ = [0, [12, 44, [17, [0, cst$10, 1, 0], 0]], cst$13],
    _v_ = [0, [12, 44, [17, [0, cst$10, 1, 0], 0]], cst$13],
    _w_ = [0, [12, 44, [17, [0, cst$10, 1, 0], 0]], cst$13],
    _x_ = [0, [17, [0, cst$12, 0, 0], [11, cst$14, [17, 0, 0]]], cst$15],
    _y_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Lineref", [17, [0, cst$10, 1, 0], 0]]]],
       "(@[<2>Ast.Lineref@ "],
    _z_ = [0, [4, 0, 0, 0, 0], "%d"],
    _A_ = [0, [17, 0, [12, 41, 0]], cst$11],
    _m_ = [0, [15, 0], cst_a],
    _a_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Atom", [17, [0, cst$10, 1, 0], 0]]]],
       "(@[<2>Ast.Atom@ "],
    _b_ = [0, [3, 0, 0], "%S"],
    _c_ = [0, [17, 0, [12, 41, 0]], cst$11],
    _d_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Bool", [17, [0, cst$10, 1, 0], 0]]]],
       "(@[<2>Ast.Bool@ "],
    _e_ = [0, [9, 0, 0], "%B"],
    _f_ = [0, [17, 0, [12, 41, 0]], cst$11],
    _g_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Conn (", [17, [0, cst$12, 0, 0], 0]]]],
       "(@[<2>Ast.Conn (@,"],
    _h_ = [0, [12, 44, [17, [0, cst$10, 1, 0], 0]], cst$13],
    _i_ = [0, [12, 44, [17, [0, cst$10, 1, 0], 0]], cst$13],
    _j_ = [0, [17, [0, cst$12, 0, 0], [11, cst$14, [17, 0, 0]]], cst$15],
    _k_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Not", [17, [0, cst$10, 1, 0], 0]]]],
       "(@[<2>Ast.Not@ "],
    _l_ = [0, [17, 0, [12, 41, 0]], cst$11];
   caml_update_dummy
    (pp_prop,
     function(fmt, param){
      switch(param[0]){
        case 0:
         var a0 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _a_);
         caml_call1(caml_call2(Stdlib_Format[137], fmt, _b_), a0);
         return caml_call2(Stdlib_Format[137], fmt, _c_);
        case 1:
         var a0$0 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _d_);
         caml_call1(caml_call2(Stdlib_Format[137], fmt, _e_), a0$0);
         return caml_call2(Stdlib_Format[137], fmt, _f_);
        case 2:
         var a2 = param[3], a1 = param[2], a0$1 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _g_);
         switch(a0$1){
           case 0:
            caml_call2(Stdlib_Format[13], fmt, cst_Ast_And); break;
           case 1:
            caml_call2(Stdlib_Format[13], fmt, cst_Ast_Or); break;
           case 2:
            caml_call2(Stdlib_Format[13], fmt, cst_Ast_Impl); break;
           default: caml_call2(Stdlib_Format[13], fmt, cst_Ast_Iff);
         }
         caml_call2(Stdlib_Format[137], fmt, _h_);
         caml_call1(caml_call1(pp_prop, fmt), a1);
         caml_call2(Stdlib_Format[137], fmt, _i_);
         caml_call1(caml_call1(pp_prop, fmt), a2);
         return caml_call2(Stdlib_Format[137], fmt, _j_);
        default:
         var a0$2 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _k_);
         caml_call1(caml_call1(pp_prop, fmt), a0$2);
         return caml_call2(Stdlib_Format[137], fmt, _l_);
      }
     });
   caml_update_dummy
    (show_prop,
     function(x){return caml_call3(Stdlib_Format[141], _m_, pp_prop, x);});
   var
    pp = function _Y_(_W_, _X_){return _Y_.fun(_W_, _X_);},
    show = function _V_(_U_){return _V_.fun(_U_);};
   caml_update_dummy
    (pp,
     function(fmt, param){
      switch(param[0]){
        case 0:
         var a0 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _n_);
         caml_call1(caml_call1(pp_prop, fmt), a0);
         return caml_call2(Stdlib_Format[137], fmt, _o_);
        case 1:
         var a2 = param[3], a1 = param[2];
         caml_call2(Stdlib_Format[137], fmt, _p_);
         caml_call2(Stdlib_Format[13], fmt, cst_fun);
         caml_call2(Stdlib_Format[137], fmt, _q_);
         caml_call1(caml_call1(pp, fmt), a1);
         caml_call2(Stdlib_Format[137], fmt, _r_);
         caml_call1(caml_call1(pp_prop, fmt), a2);
         return caml_call2(Stdlib_Format[137], fmt, _s_);
        case 2:
         var a3 = param[4], a2$0 = param[3], a1$0 = param[2];
         caml_call2(Stdlib_Format[137], fmt, _t_);
         caml_call2(Stdlib_Format[13], fmt, cst_fun$0);
         caml_call2(Stdlib_Format[137], fmt, _u_);
         caml_call1(caml_call1(pp, fmt), a1$0);
         caml_call2(Stdlib_Format[137], fmt, _v_);
         caml_call1(caml_call1(pp, fmt), a2$0);
         caml_call2(Stdlib_Format[137], fmt, _w_);
         caml_call1(caml_call1(pp_prop, fmt), a3);
         return caml_call2(Stdlib_Format[137], fmt, _x_);
        default:
         var a0$0 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _y_);
         caml_call1(caml_call2(Stdlib_Format[137], fmt, _z_), a0$0);
         return caml_call2(Stdlib_Format[137], fmt, _A_);
      }
     });
   caml_update_dummy
    (show, function(x){return caml_call3(Stdlib_Format[141], _B_, pp, x);});
   function format_prop(param){
    switch(param[0]){
      case 0:
       var a = param[1]; return a;
      case 1:
       var b = param[1]; return b ? cst_T : cst_F;
      case 2:
       var q = param[3], p = param[2], conn = param[1];
       switch(conn){
         case 0:
          var
           _E_ = format_prop(q),
           _F_ = caml_call2(Stdlib[28], cst, _E_),
           _G_ = format_prop(p),
           s = caml_call2(Stdlib[28], _G_, _F_);
          break;
         case 1:
          var
           _I_ = format_prop(q),
           _J_ = caml_call2(Stdlib[28], cst$2, _I_),
           _K_ = format_prop(p),
           s = caml_call2(Stdlib[28], _K_, _J_);
          break;
         case 2:
          var
           _L_ = format_prop(q),
           _M_ = caml_call2(Stdlib[28], cst$3, _L_),
           _N_ = format_prop(p),
           s = caml_call2(Stdlib[28], _N_, _M_);
          break;
         default:
          var
           _O_ = format_prop(q),
           _P_ = caml_call2(Stdlib[28], cst$4, _O_),
           _Q_ = format_prop(p),
           s = caml_call2(Stdlib[28], _Q_, _P_);
       }
       var _H_ = caml_call2(Stdlib[28], s, cst$0);
       return caml_call2(Stdlib[28], cst$1, _H_);
      default:
       var p$0 = param[1];
       if(1 < p$0[0]){
        var _S_ = format_prop(p$0), _T_ = caml_call2(Stdlib[28], _S_, cst$6);
        return caml_call2(Stdlib[28], cst$7, _T_);
       }
       var _R_ = format_prop(p$0);
       return caml_call2(Stdlib[28], cst$5, _R_);
    }
   }
   function format_conc(t){
    switch(t[0]){
      case 0:
       var p = t[1], _C_ = p; break;
      case 1:
       var q = t[3], _C_ = q; break;
      case 2:
       var q$0 = t[4], _C_ = q$0; break;
      default: var _C_ = caml_call1(Stdlib[2], cst_Precondition_violated);
    }
    var _D_ = format_prop(_C_);
    return caml_call1(caml_call1(Stdlib[28], cst$8), _D_);
   }
   var Interp_Ast = [0, pp, show, format_prop, format_conc];
   runtime.caml_register_global(50, Interp_Ast, "Interp__Ast");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Eval
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function negate(exp){
    var exp$0 = simplify(exp);
    if(1 !== exp$0[0]) return [3, exp$0];
    var a = exp$0[1];
    return [1, 1 - a];
   }
   function collapse(binop, exp1, exp2){
    if(1 === exp1[0] && 1 === exp2[0]){
     var b = exp2[1], a = exp1[1];
     switch(binop){
       case 0:
        var b$0 = a ? b : a; return [1, b$0];
       case 1:
        var a$0 = a || b; return [1, a$0];
       case 2:
        var _b_ = 1 - a, _c_ = _b_ || b; return [1, _c_];
       default: return [1, a === b ? 1 : 0];
     }
    }
    return [2, binop, exp1, exp2];
   }
   function simplify(atom){
    switch(atom[0]){
      case 0:
       return atom;
      case 1:
       return atom;
      case 2:
       var
        exp2 = atom[3],
        exp1 = atom[2],
        binop = atom[1],
        _a_ = simplify(exp2);
       return collapse(binop, simplify(exp1), _a_);
      default:
       var exp = atom[1];
       if(1 !== exp[0]) return negate(exp);
       var a = exp[1];
       return [1, 1 - a];
    }
   }
   var Interp_Eval = [0, simplify, collapse, negate];
   runtime.caml_register_global(0, Interp_Eval, "Interp__Eval");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Rules
//# unitInfo: Requires: Interp__Ast, Interp__Eval, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = " !=> ",
    cst = " <!=> ",
    Interp_Eval = global_data.Interp__Eval,
    Interp_Ast = global_data.Interp__Ast,
    Stdlib = global_data.Stdlib,
    Invalid = [248, "Interp__Rules.Invalid", runtime.caml_fresh_oo_id(0)];
   function not_equivalent(p, q){
    var
     _a0_ = caml_call1(Interp_Ast[3], q),
     _a1_ = caml_call2(Stdlib[28], cst, _a0_),
     _a2_ = caml_call1(Interp_Ast[3], p);
    return [0, Invalid, caml_call2(Stdlib[28], _a2_, _a1_)];
   }
   function is_equivalent(pattern, p, q){
    if(check(pattern, p, q)) return q;
    throw caml_maybe_attach_backtrace(not_equivalent(p, q), 1);
   }
   function check(pattern, p, q){
    var p$0 = p, q$0 = q;
    for(;;){
     var _aU_ = caml_call2(pattern, p$0, q$0);
     if(_aU_)
      var _aV_ = _aU_;
     else{
      switch(p$0[0]){
        case 2:
         if(2 === q$0[0]){
          var
           q2 = q$0[3],
           p2 = q$0[2],
           conn2 = q$0[1],
           q1 = p$0[3],
           p1 = p$0[2],
           conn1 = p$0[1];
          if(conn1 === conn2){
           var
            _aW_ = check(pattern, p1, p2),
            _aX_ = _aW_ || check(pattern, q1, q2);
           if(_aX_)
            var _aY_ = caml_equal(p1, p2), _aZ_ = _aY_ || caml_equal(q1, q2);
           else
            var _aZ_ = _aX_;
           return _aZ_;
          }
         }
         break;
        case 3:
         if(3 === q$0[0]){
          var q$1 = q$0[1], p$1 = p$0[1], p$0 = p$1, q$0 = q$1;
          continue;
         }
         break;
      }
      var _aV_ = 0;
     }
     return _aV_;
    }
   }
   function le(p, q){
    var _aF_ = caml_equal(caml_call1(Interp_Eval[1], p), q);
    a:
    if(_aF_)
     var _aG_ = _aF_;
    else{
     var _aH_ = caml_equal(caml_call1(Interp_Eval[1], q), p);
     if(! _aH_){
      b:
      if(2 === p[0]){
       c:
       {
        switch(p[1]){
          case 0:
           var _aI_ = p[2];
           if(2 !== _aI_[0]) break b;
           if(2 !== _aI_[1]) break b;
           var _aJ_ = p[3];
           if(2 !== _aJ_[0]) break b;
           if(2 !== _aJ_[1]) break b;
           if(2 !== q[0]) break b;
           if(3 > q[1]) break b;
           var
            p3 = _aJ_[3],
            q3 = _aJ_[2],
            q2 = _aI_[3],
            p2 = _aI_[2],
            q1 = q[3],
            p1 = q[2];
           break c;
          case 1:
           var _aO_ = p[2];
           if(3 !== _aO_[0]) break b;
           if(2 !== q[0]) break b;
           if(2 !== q[1]) break b;
           var q2$0 = p[3], p2$0 = _aO_[1], q1$0 = q[3], p1$0 = q[2];
           break;
          case 2:
           if(2 !== q[0]) break b;
           if(1 !== q[1]) break b;
           var _aR_ = q[2];
           if(3 !== _aR_[0]) break b;
           var q2$0 = q[3], p2$0 = _aR_[1], q1$0 = p[3], p1$0 = p[2];
           break;
          default:
           if(2 !== q[0]) break b;
           if(q[1]) break b;
           var _aS_ = q[2];
           if(2 !== _aS_[0]) break b;
           if(2 !== _aS_[1]) break b;
           var _aT_ = q[3];
           if(2 !== _aT_[0]) break b;
           if(2 !== _aT_[1]) break b;
           var
            p3 = _aT_[3],
            q3 = _aT_[2],
            q2 = _aS_[3],
            p2 = _aS_[2],
            q1 = p[3],
            p1 = p[2];
           break c;
        }
        var
         _aP_ = caml_equal(p1$0, p2$0),
         _aQ_ = _aP_ ? caml_equal(q1$0, q2$0) : _aP_;
        return _aQ_;
       }
       var _aK_ = caml_equal(p1, p2);
       if(_aK_){
        var _aL_ = caml_equal(p2, p3);
        if(_aL_)
         var
          _aM_ = caml_equal(q1, q2),
          _aN_ = _aM_ ? caml_equal(q2, q3) : _aM_;
        else
         var _aN_ = _aL_;
       }
       else
        var _aN_ = _aK_;
       var _aG_ = _aN_;
       break a;
      }
      return 0;
     }
     var _aG_ = _aH_;
    }
    return _aG_;
   }
   function idempotence(p, q){
    if(2 === p[0] && 2 > p[1]){
     var p2$0 = p[3], p1$0 = p[2];
     if(caml_equal(p1$0, p2$0)) return caml_equal(p1$0, q);
    }
    if(2 === q[0] && 2 > q[1]){
     var p2 = q[3], p1 = q[2];
     if(caml_equal(p1, p2)) return caml_equal(p1, p);
    }
    return 0;
   }
   function commutative(p, q){
    if(2 === p[0]){
     var conn1 = p[1];
     if(2 !== conn1 && 2 === q[0]){
      var conn2 = q[1], q1 = p[3], p1 = p[2];
      if(2 !== conn2){
       var p2 = q[3], q2 = q[2], _aC_ = conn1 === conn2 ? 1 : 0;
       if(_aC_)
        var
         _aD_ = caml_equal(p1, p2),
         _aE_ = _aD_ ? caml_equal(q1, q2) : _aD_;
       else
        var _aE_ = _aC_;
       return _aE_;
      }
     }
    }
    return 0;
   }
   function associative(p, q){
    if(2 === p[0]){
     var _ar_ = p[1];
     if(1 === _ar_){
      var _as_ = p[2];
      if(2 === _as_[0] && 1 === _as_[1] && 2 === q[0] && 1 === q[1]){
       var _at_ = q[3];
       if(2 === _at_[0] && 1 === _at_[1]){
        var
         r2 = _at_[3],
         q2 = _at_[2],
         p2 = q[2],
         r1 = p[3],
         q1 = _as_[3],
         p1 = _as_[2],
         _au_ = caml_equal(p1, p2);
        if(_au_)
         var
          _av_ = caml_equal(q1, q2),
          _aw_ = _av_ ? caml_equal(r1, r2) : _av_;
        else
         var _aw_ = _au_;
        return _aw_;
       }
      }
     }
     else if(! _ar_){
      var _ax_ = p[2];
      if(2 === _ax_[0] && ! _ax_[1] && 2 === q[0] && ! q[1]){
       var _ay_ = q[3];
       if(2 === _ay_[0] && ! _ay_[1]){
        var
         r2$0 = _ay_[3],
         q2$0 = _ay_[2],
         p2$0 = q[2],
         r1$0 = p[3],
         q1$0 = _ax_[3],
         p1$0 = _ax_[2],
         _az_ = caml_equal(p1$0, p2$0);
        if(_az_)
         var
          _aA_ = caml_equal(q1$0, q2$0),
          _aB_ = _aA_ ? caml_equal(r1$0, r2$0) : _aA_;
        else
         var _aB_ = _az_;
        return _aB_;
       }
      }
     }
    }
    return 0;
   }
   function distributive(p, q){
    a:
    if(2 === p[0]){
     var _Y_ = p[1];
     b:
     {
      c:
      {
       if(1 === _Y_){
        var _Z_ = p[2], ___ = p[3];
        if(2 !== ___[0]) break a;
        if(___[1]) break a;
        if(2 !== q[0]) break a;
        if(q[1]) break a;
        var _$_ = q[2];
        if(2 === _$_[0] && 1 === _$_[1]){
         var _ag_ = q[3];
         if(2 !== _ag_[0]) break a;
         if(1 !== _ag_[1]) break a;
         var
          r2$0 = _ag_[3],
          p3$0 = _ag_[2],
          q2$0 = _$_[3],
          p2$0 = _$_[2],
          r1$0 = ___[3],
          q1$0 = ___[2],
          p1$0 = _Z_;
         break c;
        }
        if(2 !== _Z_[0]) break a;
        if(_Z_[1]) break a;
        var _aa_ = q[3];
        if(2 !== _aa_[0]) break a;
        if(1 !== _aa_[1]) break a;
        var
         _ab_ = p[3],
         r2 = _ab_[3],
         p3 = _ab_[2],
         q2 = _Z_[3],
         p2 = _Z_[2],
         r1 = _aa_[3],
         q1 = _aa_[2],
         p1 = q[2];
        break b;
       }
       if(_Y_) break a;
       var _al_ = p[2];
       if(2 === _al_[0] && 1 === _al_[1]){
        var _ap_ = p[3];
        if(2 !== _ap_[0]) break a;
        if(1 !== _ap_[1]) break a;
        if(2 !== q[0]) break a;
        if(1 !== q[1]) break a;
        var _aq_ = q[3];
        if(2 !== _aq_[0]) break a;
        if(_aq_[1]) break a;
        var
         r2$0 = _ap_[3],
         p3$0 = _ap_[2],
         q2$0 = _al_[3],
         p2$0 = _al_[2],
         r1$0 = _aq_[3],
         q1$0 = _aq_[2],
         p1$0 = q[2];
        break c;
       }
       var _am_ = p[3];
       if(2 !== _am_[0]) break a;
       if(1 !== _am_[1]) break a;
       if(2 !== q[0]) break a;
       if(1 !== q[1]) break a;
       var _an_ = q[2];
       if(2 !== _an_[0]) break a;
       if(_an_[1]) break a;
       var _ao_ = q[3];
       if(2 !== _ao_[0]) break a;
       if(_ao_[1]) break a;
       var
        r2 = _ao_[3],
        p3 = _ao_[2],
        q2 = _an_[3],
        p2 = _an_[2],
        r1 = _am_[3],
        q1 = _am_[2],
        p1 = _al_;
       break b;
      }
      var _ah_ = caml_equal(p1$0, p2$0);
      if(_ah_){
       var _ai_ = caml_equal(p2$0, p3$0);
       if(_ai_)
        var
         _aj_ = caml_equal(q1$0, q2$0),
         _ak_ = _aj_ ? caml_equal(r1$0, r2$0) : _aj_;
       else
        var _ak_ = _ai_;
      }
      else
       var _ak_ = _ah_;
      return _ak_;
     }
     var _ac_ = caml_equal(p1, p2);
     if(_ac_){
      var _ad_ = caml_equal(p2, p3);
      if(_ad_)
       var _ae_ = caml_equal(q1, q2), _af_ = _ae_ ? caml_equal(r1, r2) : _ae_;
      else
       var _af_ = _ad_;
     }
     else
      var _af_ = _ac_;
     return _af_;
    }
    return 0;
   }
   function doublenegation(p, q){
    if(3 === p[0]){
     var match$0 = p[1];
     if(3 === match$0[0]){var p1 = match$0[1]; return caml_equal(p1, q);}
    }
    if(3 === q[0]){
     var match = q[1];
     if(3 === match[0]){var p2 = match[1]; return caml_equal(p, p2);}
    }
    return 0;
   }
   function demorgans(p, q){
    a:
    {
     switch(p[0]){
       case 2:
        var _H_ = p[1];
        if(2 <= _H_) break a;
        var _I_ = p[2];
        if(3 !== _I_[0]) break a;
        var _J_ = p[3];
        if(3 !== _J_[0]) break a;
        if(3 !== q[0]) break a;
        var _K_ = q[1];
        if(2 !== _K_[0]) break a;
        var _L_ = _K_[1], _M_ = _J_[1], _N_ = _I_[1];
        if(2 <= _L_) break a;
        var
         q2 = _K_[3],
         p2 = _K_[2],
         conn2 = _L_,
         q1 = _M_,
         p1 = _N_,
         conn1 = _H_;
        break;
       case 3:
        var _R_ = p[1];
        if(2 !== _R_[0]) break a;
        var _S_ = _R_[1];
        if(2 <= _S_) break a;
        if(2 !== q[0]) break a;
        var _T_ = q[1], _U_ = _R_[3], _V_ = _R_[2];
        if(2 <= _T_) break a;
        var _W_ = q[2];
        if(3 !== _W_[0]) break a;
        var _X_ = q[3];
        if(3 !== _X_[0]) break a;
        var
         q2 = _X_[1],
         p2 = _W_[1],
         conn2 = _T_,
         q1 = _U_,
         p1 = _V_,
         conn1 = _S_;
        break;
       default: break a;
     }
     var _O_ = conn1 !== conn2 ? 1 : 0;
     if(_O_)
      var _P_ = caml_equal(p1, p2), _Q_ = _P_ ? caml_equal(q1, q2) : _P_;
     else
      var _Q_ = _O_;
     return _Q_;
    }
    return 0;
   }
   function identity(p, q){
    a:
    {
     b:
     if(2 === p[0]){
      var _B_ = p[1];
      if(1 === _B_){
       var _C_ = p[2];
       c:
       {
        if(1 === _C_[0] && ! _C_[1]){var p1$0 = p[3]; break c;}
        var _D_ = p[3];
        if(1 !== _D_[0]) break b;
        if(_D_[1]) break b;
        var p1$0 = _C_;
       }
       var p2 = q, p1 = p1$0;
       break a;
      }
      if(! _B_){
       var _E_ = p[2];
       c:
       {
        if(1 === _E_[0] && _E_[1]){var _G_ = p[3]; break c;}
        var _F_ = p[3];
        if(1 !== _F_[0]) break b;
        if(! _F_[1]) break b;
        var _G_ = _E_;
       }
       var p2 = q, p1 = _G_;
       break a;
      }
     }
     b:
     if(2 === q[0]){
      var _u_ = q[1];
      if(1 === _u_){
       var _v_ = q[2];
       c:
       {
        if(1 === _v_[0] && ! _v_[1]){var _x_ = q[3]; break c;}
        var _w_ = q[3];
        if(1 !== _w_[0]) break b;
        if(_w_[1]) break b;
        var _x_ = _v_;
       }
       var p2 = _x_, p1 = p;
       break a;
      }
      if(! _u_){
       var _y_ = q[2];
       c:
       {
        if(1 === _y_[0] && _y_[1]){var _A_ = q[3]; break c;}
        var _z_ = q[3];
        if(1 !== _z_[0]) break b;
        if(! _z_[1]) break b;
        var _A_ = _y_;
       }
       var p2 = _A_, p1 = p;
       break a;
      }
     }
     return 0;
    }
    return caml_equal(p1, p2);
   }
   function dominance(p, q){
    a:
    {
     switch(p[0]){
       case 1:
        if(p[1]){
         if(2 !== q[0]) break a;
         if(1 !== q[1]) break a;
         var _l_ = q[2];
         if(1 === _l_[0] && _l_[1]) break;
         var _m_ = q[3];
         if(1 !== _m_[0] || ! _m_[1]) break a;
        }
        else{
         if(2 !== q[0]) break a;
         if(q[1]) break a;
         var _n_ = q[2];
         if(1 === _n_[0] && ! _n_[1]) break;
         var _o_ = q[3];
         if(1 !== _o_[0] || _o_[1]) break a;
        }
        break;
       case 2:
        var _p_ = p[1];
        if(1 === _p_){
         var _q_ = p[2];
         b:
         {
          if(1 === _q_[0] && _q_[1]) break b;
          var _r_ = p[3];
          if(1 !== _r_[0] || ! _r_[1]) break a;
         }
         if(1 !== q[0] || ! q[1]) break a;
        }
        else{
         if(_p_) break a;
         var _s_ = p[2];
         b:
         {
          if(1 === _s_[0] && ! _s_[1]) break b;
          var _t_ = p[3];
          if(1 !== _t_[0] || _t_[1]) break a;
         }
         if(1 !== q[0] || q[1]) break a;
        }
        break;
       default: break a;
     }
     return 1;
    }
    return 0;
   }
   function contradiction(p, q){
    a:
    if(2 === p[0] && ! p[1]){
     var p1 = p[2];
     if(3 === p1[0]){
      if(1 !== q[0]) break a;
      if(q[1]) break a;
      var p2$0 = p[3], p1$0 = p1[1];
      if(caml_equal(p1$0, p2$0)) return 1;
     }
     var _k_ = p[3];
     if(3 === _k_[0] && 1 === q[0] && ! q[1]){
      var p2 = _k_[1];
      if(caml_equal(p1, p2)) return 1;
     }
    }
    return 0;
   }
   function tautology(p, q){
    a:
    if(2 === p[0] && 1 === p[1]){
     var p1 = p[2];
     if(3 === p1[0]){
      if(1 !== q[0]) break a;
      if(! q[1]) break a;
      var p2$0 = p[3], p1$0 = p1[1];
      if(caml_equal(p1$0, p2$0)) return 1;
     }
     var _j_ = p[3];
     if(3 === _j_[0] && 1 === q[0] && q[1]){
      var p2 = _j_[1];
      if(caml_equal(p1, p2)) return 1;
     }
    }
    return 0;
   }
   function not_implied(p1, p2, q){
    var
     _e_ = caml_call1(Interp_Ast[3], q),
     _f_ = caml_call2(Stdlib[28], cst$0, _e_),
     _g_ = caml_call1(Interp_Ast[3], p2),
     _h_ = caml_call2(Stdlib[28], _g_, _f_),
     _i_ = caml_call1(Interp_Ast[3], p1);
    return [0, Invalid, caml_call2(Stdlib[28], _i_, _h_)];
   }
   function is_implied(pattern, p1, p2, q){
    if(caml_call3(pattern, p1, p2, q)) return q;
    throw caml_maybe_attach_backtrace(not_implied(p1, p2, q), 1);
   }
   function modusponens(p1, p2, q){
    if(2 === p1[0] && 2 === p1[1]){
     var
      q1 = p1[3],
      p1$0 = p1[2],
      _c_ = caml_equal(p1$0, p2),
      _d_ = _c_ ? caml_equal(q1, q) : _c_;
     return _d_;
    }
    return 0;
   }
   function modustollens(p1, p2, q){
    if(2 === p1[0] && 2 === p1[1] && 3 === p2[0]){
     var
      p2$0 = p2[1],
      p1$0 = p1[3],
      q1 = p1[2],
      _a_ = caml_equal(p1$0, p2$0),
      _b_ = _a_ ? caml_equal(q1, [3, q]) : _a_;
     return _b_;
    }
    return 0;
   }
   var
    Interp_Rules =
      [0,
       Invalid,
       not_equivalent,
       is_equivalent,
       check,
       le,
       idempotence,
       commutative,
       associative,
       distributive,
       doublenegation,
       demorgans,
       identity,
       dominance,
       contradiction,
       tautology,
       not_implied,
       is_implied,
       modusponens,
       modustollens];
   runtime.caml_register_global(6, Interp_Rules, "Interp__Rules");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Validate
//# unitInfo: Requires: Interp__Rules, Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Interp_Rules = global_data.Interp__Rules,
    le = caml_call1(Interp_Rules[3], Interp_Rules[5]),
    idempotence = caml_call1(Interp_Rules[3], Interp_Rules[6]),
    commutative = caml_call1(Interp_Rules[3], Interp_Rules[7]),
    associative = caml_call1(Interp_Rules[3], Interp_Rules[8]),
    distributive = caml_call1(Interp_Rules[3], Interp_Rules[9]),
    doublenegation = caml_call1(Interp_Rules[3], Interp_Rules[10]),
    demorgan = caml_call1(Interp_Rules[3], Interp_Rules[11]),
    identity = caml_call1(Interp_Rules[3], Interp_Rules[12]),
    dominance = caml_call1(Interp_Rules[3], Interp_Rules[13]),
    contradiction = caml_call1(Interp_Rules[3], Interp_Rules[14]),
    tautology = caml_call1(Interp_Rules[3], Interp_Rules[15]),
    modusponens = caml_call1(Interp_Rules[17], Interp_Rules[18]),
    modustollens = caml_call1(Interp_Rules[17], Interp_Rules[19]),
    cst_Precondition_violated = "Precondition violated";
   function validate(param){
    switch(param[0]){
      case 0:
       var p = param[1]; return p;
      case 1:
       var q = param[3], p$0 = param[2], rule = param[1];
       return caml_call2(rule, validate(p$0), q);
      case 2:
       var
        q$0 = param[4],
        p2 = param[3],
        p1 = param[2],
        rule$0 = param[1],
        _a_ = validate(p2);
       return caml_call3(rule$0, validate(p1), _a_, q$0);
      default: return caml_call1(Stdlib[2], cst_Precondition_violated);
    }
   }
   var
    Interp_Validate =
      [0,
       le,
       idempotence,
       commutative,
       associative,
       distributive,
       doublenegation,
       demorgan,
       identity,
       dominance,
       contradiction,
       tautology,
       modusponens,
       modustollens,
       validate];
   runtime.caml_register_global(3, Interp_Validate, "Interp__Validate");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Parser
//# unitInfo: Requires: Interp__Validate, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printf = global_data.Stdlib__Printf,
    Assert_failure = global_data.Assert_failure,
    Interp_Validate = global_data.Interp__Validate,
    Error =
      [248, "Interp__Parser.MenhirBasics.Error", runtime.caml_fresh_oo_id(0)],
    _a_ =
      [0,
       [11,
        "Internal failure -- please contact the parser generator's developers.\n",
        [10, 0]],
       "Internal failure -- please contact the parser generator's developers.\n%!"],
    _b_ = [0, "src/parser.ml", 362, 4];
   function eRR(s){throw caml_maybe_attach_backtrace(Error, 1);}
   function menhir_run_16(menhir_stack$1, menhir_s$1){
    var menhir_stack = menhir_stack$1, v = 0, menhir_s = menhir_s$1;
    for(;;){
     if(! menhir_s) return v;
     if(7 > menhir_s){
      caml_call1(Stdlib_Printf[3], _a_);
      throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
     }
     var
      h = menhir_stack[3],
      menhir_s$0 = menhir_stack[2],
      menhir_stack$0 = menhir_stack[1],
      v$0 = [0, h, v],
      menhir_stack = menhir_stack$0,
      v = v$0,
      menhir_s = menhir_s$0;
    }
   }
   function menhir_run_01$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var menhir_stack$0 = menhir_stack, menhir_s$0 = menhir_s;
    for(;;){
     var
      menhir_stack$1 = [0, menhir_stack$0, menhir_s$0],
      tok = caml_call1(menhir_lexer, menhir_lexbuf),
      menhir_s$1 = 1;
     if(typeof tok === "number")
      switch(tok){
        case 4:
         var menhir_stack$0 = menhir_stack$1, menhir_s$0 = menhir_s$1;
         continue;
        case 7:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_02$0,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
         var counter$2 = counter + 1 | 0;
         return menhir_run_02$0
                 (counter$2,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$1);
      }
     else
      switch(tok[0]){
        case 1:
         var v = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_03$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v,
                    menhir_s$1]);
         var counter$1 = counter + 1 | 0;
         return menhir_run_03$0
                 (counter$1,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s$1);
        case 2:
         var v$0 = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_04$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s$1]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_04$0
                 (counter$0,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s$1);
      }
     return eRR(0);
    }
   }
   function menhir_run_02$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var menhir_stack$0 = menhir_stack, menhir_s$0 = menhir_s;
    for(;;){
     var
      menhir_stack$1 = [0, menhir_stack$0, menhir_s$0],
      tok = caml_call1(menhir_lexer, menhir_lexbuf),
      menhir_s$1 = 2;
     if(typeof tok === "number")
      switch(tok){
        case 4:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_01$0,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
         var counter$2 = counter + 1 | 0;
         return menhir_run_01$0
                 (counter$2,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$1);
        case 7:
         var menhir_stack$0 = menhir_stack$1, menhir_s$0 = menhir_s$1;
         continue;
      }
     else
      switch(tok[0]){
        case 1:
         var v = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_03$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v,
                    menhir_s$1]);
         var counter$1 = counter + 1 | 0;
         return menhir_run_03$0
                 (counter$1,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s$1);
        case 2:
         var v$0 = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_04$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s$1]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_04$0
                 (counter$0,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s$1);
      }
     return eRR(0);
    }
   }
   function menhir_run_03$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, b, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [1, b];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_prop,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_prop
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_goto_prop
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v$3, menhir_s, tok){
    var
     menhir_stack$0 = menhir_stack,
     p2 = v$3,
     menhir_s$0 = menhir_s,
     tok$0 = tok;
    for(;;)
     a:
     switch(menhir_s$0){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_17,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   p2,
                   menhir_s$0,
                   tok$0]);
        var counter$11 = counter + 1 | 0;
        return menhir_run_17
                (counter$11,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 p2,
                 menhir_s$0,
                 tok$0);
       case 1:
        var
         menhir_s$1 = menhir_stack$0[2],
         menhir_stack$1 = menhir_stack$0[1],
         v$4 = [3, p2],
         menhir_stack$0 = menhir_stack$1,
         p2 = v$4,
         menhir_s$0 = menhir_s$1;
        break;
       case 2:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 1:
            var
             tok$1 = caml_call1(menhir_lexer, menhir_lexbuf),
             menhir_s$6 = menhir_stack$0[2],
             menhir_stack$13 = menhir_stack$0[1],
             menhir_stack$0 = menhir_stack$13,
             menhir_s$0 = menhir_s$6,
             tok$0 = tok$1;
            break a;
           case 3:
            var menhir_stack$14 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$14, menhir_lexbuf, menhir_lexer]);
            var counter$10 = counter + 1 | 0;
            return menhir_run_07
                    (counter$10, menhir_stack$14, menhir_lexbuf, menhir_lexer);
           case 9:
            var menhir_stack$15 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$15, menhir_lexbuf, menhir_lexer]);
            var counter$6 = counter + 1 | 0;
            return menhir_run_09
                    (counter$6, menhir_stack$15, menhir_lexbuf, menhir_lexer);
           case 10:
            var menhir_stack$16 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_13,
                      [0, menhir_stack$16, menhir_lexbuf, menhir_lexer]);
            var counter$3 = counter + 1 | 0;
            return menhir_run_13
                    (counter$3, menhir_stack$16, menhir_lexbuf, menhir_lexer);
           case 22:
            var menhir_stack$17 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_11,
                      [0, menhir_stack$17, menhir_lexbuf, menhir_lexer]);
            var counter$2 = counter + 1 | 0;
            return menhir_run_11
                    (counter$2, menhir_stack$17, menhir_lexbuf, menhir_lexer);
         }
        return eRR(0);
       case 3:
        var
         p1$2 = menhir_stack$0[3],
         menhir_s$5 = menhir_stack$0[2],
         menhir_stack$12 = menhir_stack$0[1],
         v = [2, 1, p1$2, p2],
         menhir_stack$0 = menhir_stack$12,
         p2 = v,
         menhir_s$0 = menhir_s$5;
        break;
       case 4:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 3:
            var menhir_stack$9 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$9, menhir_lexbuf, menhir_lexer]);
            var counter$9 = counter + 1 | 0;
            return menhir_run_07
                    (counter$9, menhir_stack$9, menhir_lexbuf, menhir_lexer);
           case 9:
            var menhir_stack$10 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$10, menhir_lexbuf, menhir_lexer]);
            var counter$5 = counter + 1 | 0;
            return menhir_run_09
                    (counter$5, menhir_stack$10, menhir_lexbuf, menhir_lexer);
           case 22:
            var menhir_stack$11 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_11,
                      [0, menhir_stack$11, menhir_lexbuf, menhir_lexer]);
            var counter$1 = counter + 1 | 0;
            return menhir_run_11
                    (counter$1, menhir_stack$11, menhir_lexbuf, menhir_lexer);
           case 4:
           case 7:
           case 13:
           case 19: break;
           default:
            var
             p1$1 = menhir_stack$0[3],
             menhir_s$4 = menhir_stack$0[2],
             menhir_stack$8 = menhir_stack$0[1],
             v$1 = [2, 2, p1$1, p2],
             menhir_stack$0 = menhir_stack$8,
             p2 = v$1,
             menhir_s$0 = menhir_s$4;
            break a;
         }
        return eRR(0);
       case 5:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 3:
            var menhir_stack$7 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$7, menhir_lexbuf, menhir_lexer]);
            var counter$8 = counter + 1 | 0;
            return menhir_run_07
                    (counter$8, menhir_stack$7, menhir_lexbuf, menhir_lexer);
           case 4:
           case 7:
           case 13:
           case 19: break;
           default:
            var
             p1$0 = menhir_stack$0[3],
             menhir_s$3 = menhir_stack$0[2],
             menhir_stack$6 = menhir_stack$0[1],
             v$0 = [2, 0, p1$0, p2],
             menhir_stack$0 = menhir_stack$6,
             p2 = v$0,
             menhir_s$0 = menhir_s$3;
            break a;
         }
        return eRR(0);
       case 6:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 3:
            var menhir_stack$3 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$3, menhir_lexbuf, menhir_lexer]);
            var counter$7 = counter + 1 | 0;
            return menhir_run_07
                    (counter$7, menhir_stack$3, menhir_lexbuf, menhir_lexer);
           case 9:
            var menhir_stack$4 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$4, menhir_lexbuf, menhir_lexer]);
            var counter$4 = counter + 1 | 0;
            return menhir_run_09
                    (counter$4, menhir_stack$4, menhir_lexbuf, menhir_lexer);
           case 22:
            var menhir_stack$5 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_11,
                      [0, menhir_stack$5, menhir_lexbuf, menhir_lexer]);
            var counter$0 = counter + 1 | 0;
            return menhir_run_11
                    (counter$0, menhir_stack$5, menhir_lexbuf, menhir_lexer);
           case 4:
           case 7:
           case 13:
           case 19: break;
           default:
            var
             p1 = menhir_stack$0[3],
             menhir_s$2 = menhir_stack$0[2],
             menhir_stack$2 = menhir_stack$0[1],
             v$2 = [2, 3, p1, p2],
             menhir_stack$0 = menhir_stack$2,
             p2 = v$2,
             menhir_s$0 = menhir_s$2;
            break a;
         }
        return eRR(0);
       default:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_17,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   p2,
                   menhir_s$0,
                   tok$0]);
        var counter$12 = counter + 1 | 0;
        return menhir_run_17
                (counter$12,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 p2,
                 menhir_s$0,
                 tok$0);
     }
   }
   function menhir_run_17
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v$12, menhir_s, tok){
    if(typeof tok === "number")
     switch(tok){
       case 0:
        var tok$0 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$0 !== "number" && 0 === tok$0[0]){
         var
          v_0 = tok$0[1],
          tok$1 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$9 = [1, Interp_Validate[11], [3, v_0], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$9,
                    menhir_s,
                    tok$1]);
         var counter$17 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$17,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$9,
                  menhir_s,
                  tok$1);
        }
        return eRR(0);
       case 2:
        var tok$2 = caml_call1(menhir_lexer, menhir_lexbuf), v$13 = [0, v$12];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_goto_expr,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$13,
                   menhir_s,
                   tok$2]);
        var counter$4 = counter + 1 | 0;
        return menhir_goto_expr
                (counter$4,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$13,
                 menhir_s,
                 tok$2);
       case 3:
        var menhir_stack$0 = [0, menhir_stack, menhir_s, v$12];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_07,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_07
                (counter$3, menhir_stack$0, menhir_lexbuf, menhir_lexer);
       case 5:
        var tok$3 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$3 !== "number" && 0 === tok$3[0]){
         var v_1 = tok$3[1], tok$4 = caml_call1(menhir_lexer, menhir_lexbuf);
         if(typeof tok$4 === "number" && 19 === tok$4){
          var tok$5 = caml_call1(menhir_lexer, menhir_lexbuf);
          if(typeof tok$5 !== "number" && 0 === tok$5[0]){
           var
            v_2 = tok$5[1],
            tok$6 = caml_call1(menhir_lexer, menhir_lexbuf),
            v$11 = [2, Interp_Validate[13], [3, v_1], [3, v_2], v$12];
           if(counter >= 50)
            return caml_trampoline_return
                    (menhir_goto_expr,
                     [0,
                      menhir_stack,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$11,
                      menhir_s,
                      tok$6]);
           var counter$16 = counter + 1 | 0;
           return menhir_goto_expr
                   (counter$16,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$11,
                    menhir_s,
                    tok$6);
          }
          return eRR(0);
         }
         return eRR(0);
        }
        return eRR(0);
       case 6:
        var tok$7 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$7 !== "number" && 0 === tok$7[0]){
         var v_3 = tok$7[1], tok$8 = caml_call1(menhir_lexer, menhir_lexbuf);
         if(typeof tok$8 === "number" && 19 === tok$8){
          var tok$9 = caml_call1(menhir_lexer, menhir_lexbuf);
          if(typeof tok$9 !== "number" && 0 === tok$9[0]){
           var
            v_4 = tok$9[1],
            tok$10 = caml_call1(menhir_lexer, menhir_lexbuf),
            v$10 = [2, Interp_Validate[12], [3, v_3], [3, v_4], v$12];
           if(counter >= 50)
            return caml_trampoline_return
                    (menhir_goto_expr,
                     [0,
                      menhir_stack,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$10,
                      menhir_s,
                      tok$10]);
           var counter$15 = counter + 1 | 0;
           return menhir_goto_expr
                   (counter$15,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$10,
                    menhir_s,
                    tok$10);
          }
          return eRR(0);
         }
         return eRR(0);
        }
        return eRR(0);
       case 8:
        var tok$11 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$11 !== "number" && 0 === tok$11[0]){
         var
          v_5 = tok$11[1],
          tok$12 = caml_call1(menhir_lexer, menhir_lexbuf),
          v = [1, Interp_Validate[1], [3, v_5], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v,
                    menhir_s,
                    tok$12]);
         var counter$14 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$14,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok$12);
        }
        return eRR(0);
       case 9:
        var menhir_stack$1 = [0, menhir_stack, menhir_s, v$12];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_09,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_09
                (counter$2, menhir_stack$1, menhir_lexbuf, menhir_lexer);
       case 10:
        var menhir_stack$2 = [0, menhir_stack, menhir_s, v$12];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_13,
                  [0, menhir_stack$2, menhir_lexbuf, menhir_lexer]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_13
                (counter$1, menhir_stack$2, menhir_lexbuf, menhir_lexer);
       case 11:
        var tok$13 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$13 !== "number" && 0 === tok$13[0]){
         var
          v_6 = tok$13[1],
          tok$14 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$0 = [1, Interp_Validate[2], [3, v_6], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s,
                    tok$14]);
         var counter$13 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$13,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s,
                  tok$14);
        }
        return eRR(0);
       case 12:
        var tok$15 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$15 !== "number" && 0 === tok$15[0]){
         var
          v_7 = tok$15[1],
          tok$16 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$6 = [1, Interp_Validate[8], [3, v_7], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$6,
                    menhir_s,
                    tok$16]);
         var counter$12 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$12,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$6,
                  menhir_s,
                  tok$16);
        }
        return eRR(0);
       case 14:
        var tok$17 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$17 !== "number" && 0 === tok$17[0]){
         var
          v_8 = tok$17[1],
          tok$18 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$7 = [1, Interp_Validate[9], [3, v_8], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$7,
                    menhir_s,
                    tok$18]);
         var counter$11 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$11,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$7,
                  menhir_s,
                  tok$18);
        }
        return eRR(0);
       case 15:
        var tok$19 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$19 !== "number" && 0 === tok$19[0]){
         var
          v_9 = tok$19[1],
          tok$20 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$4 = [1, Interp_Validate[6], [3, v_9], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$4,
                    menhir_s,
                    tok$20]);
         var counter$10 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$10,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$4,
                  menhir_s,
                  tok$20);
        }
        return eRR(0);
       case 16:
        var tok$21 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$21 !== "number" && 0 === tok$21[0]){
         var
          v_10 = tok$21[1],
          tok$22 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$5 = [1, Interp_Validate[7], [3, v_10], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$5,
                    menhir_s,
                    tok$22]);
         var counter$9 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$9,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$5,
                  menhir_s,
                  tok$22);
        }
        return eRR(0);
       case 17:
        var tok$23 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$23 !== "number" && 0 === tok$23[0]){
         var
          v_11 = tok$23[1],
          tok$24 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$3 = [1, Interp_Validate[5], [3, v_11], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$3,
                    menhir_s,
                    tok$24]);
         var counter$8 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$8,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$3,
                  menhir_s,
                  tok$24);
        }
        return eRR(0);
       case 18:
        var tok$25 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$25 !== "number" && 0 === tok$25[0]){
         var
          v_12 = tok$25[1],
          tok$26 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$8 = [1, Interp_Validate[10], [3, v_12], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$8,
                    menhir_s,
                    tok$26]);
         var counter$7 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$7,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$8,
                  menhir_s,
                  tok$26);
        }
        return eRR(0);
       case 20:
        var tok$27 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$27 !== "number" && 0 === tok$27[0]){
         var
          v_13 = tok$27[1],
          tok$28 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$1 = [1, Interp_Validate[3], [3, v_13], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$1,
                    menhir_s,
                    tok$28]);
         var counter$6 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$6,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$1,
                  menhir_s,
                  tok$28);
        }
        return eRR(0);
       case 21:
        var tok$29 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$29 !== "number" && 0 === tok$29[0]){
         var
          v_14 = tok$29[1],
          tok$30 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$2 = [1, Interp_Validate[4], [3, v_14], v$12];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$2,
                    menhir_s,
                    tok$30]);
         var counter$5 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$5,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$2,
                  menhir_s,
                  tok$30);
        }
        return eRR(0);
       case 22:
        var menhir_stack$3 = [0, menhir_stack, menhir_s, v$12];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_11,
                  [0, menhir_stack$3, menhir_lexbuf, menhir_lexer]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_11
                (counter$0, menhir_stack$3, menhir_lexbuf, menhir_lexer);
     }
    return eRR(0);
   }
   function menhir_goto_expr
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok === "number")
     switch(tok){
       case 4:
        var _c_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _c_]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3, menhir_stack$0, menhir_lexbuf, menhir_lexer, _c_);
       case 7:
        var _d_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _d_]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2, menhir_stack$0, menhir_lexbuf, menhir_lexer, _d_);
       case 13:
        return menhir_run_16(menhir_stack$0, 7);
     }
    else
     switch(tok[0]){
       case 1:
        var v_0 = tok[1], _e_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_0, _e_]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_0,
                 _e_);
       case 2:
        var v_1 = tok[1], _f_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_1, _f_]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_1,
                 _f_);
     }
    return eRR(0);
   }
   function menhir_run_04$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, a, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, a];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_prop,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_prop
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_07(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 3;
    if(typeof tok === "number")
     switch(tok){
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_09(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 4;
    if(typeof tok === "number")
     switch(tok){
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_13(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 6;
    if(typeof tok === "number")
     switch(tok){
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_11(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 5;
    if(typeof tok === "number")
     switch(tok){
       case 4:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 7:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_01(menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_01$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_02(menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_02$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_03
   (menhir_stack, menhir_lexbuf, menhir_lexer, b, menhir_s){
    return caml_trampoline
            (menhir_run_03$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, b, menhir_s));
   }
   function menhir_run_04
   (menhir_stack, menhir_lexbuf, menhir_lexer, a, menhir_s){
    return caml_trampoline
            (menhir_run_04$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, a, menhir_s));
   }
   function prog(menhir_lexer, menhir_lexbuf){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_stack = 0,
     menhir_s = 0;
    if(typeof tok === "number")
     switch(tok){
       case 4:
        return menhir_run_01
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
       case 7:
        return menhir_run_02
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
       case 13:
        return menhir_run_16(menhir_stack, menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        return menhir_run_03
                (menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s);
       case 2:
        var v$0 = tok[1];
        return menhir_run_04
                (menhir_stack, menhir_lexbuf, menhir_lexer, v$0, menhir_s);
     }
    return eRR(0);
   }
   var Interp_Parser = [0, Error, prog];
   runtime.caml_register_global(32, Interp_Parser, "Interp__Parser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Lexer
//# unitInfo: Requires: Stdlib, Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       "\0\0\xe3\xff\xe4\xff+\x003\0\n\x004\0@\0\0\x003\0\xf3\xffV\0\x01\0\0\0\xf7\xff\x02\0\x0b\0\xfa\xffO\0\xfc\xff\xfd\xff\xfe\xff\x02\0\x1c\0\xe7\xff\x1e\0$\0(\0&\0/\0\x1e\0\xf9\xff\xf8\xff\xf6\xff\x01\0\xf5\xff4\0\xf2\xff.\x004\0+\0:\0\xf1\xff;\0\x01\0\xf0\xff9\0-\x008\0:\x006\0F\0>\0J\0I\0F\0=\x009\0\xea\xffF\0\x04\0\xe8\xff\xef\xffA\0I\0B\0D\0X\0F\0R\0F\0X\0L\0^\0\\\0X\0_\0O\0[\0V\0X\0T\0\0\0\xee\xffY\0f\0a\0j\0X\0d\0X\0j\0\xe9\xff\x06\0\xeb\xffc\0\xec\xff^\0\x02\0\xed\xff^\0a\0k\0s\0a\0c\0p\0d\0v\0s\0{\0r\0z\0\b\0{\0z\0\x81\0o\0{\0v\0x\0y\0\x87\0{\0\x87\0\x86\0}\0{\0\x87\0\x8e\0\x82\0~\0\xe5\xff\x8e\0\xe6\xff~\0\x81\0\x01\0\x07\0\x86\0\x87\0\x89\0\x93\0\x8b\0\x87\0\x8f\0\x97\0\x8f\0\x8b\0",
       "\xff\xff\xff\xff\xff\xff\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\xff\xff\x0b\0\x1b\0\x1b\0\xff\xff\x1b\0\x1b\0\xff\xff\x04\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\x18\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x15\0\xff\xff\xff\xff\xff\xff\x0f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17\0\xff\xff\xff\xff\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\xff\xff\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\x02\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\0\x16\0\x16\0\x16\0\x16\0\0\0\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\0\x8a\0\x16\0\0\0\0\0\0\0\0\0\0\0\x14\0\x13\0\0\0\0\0\n\0\r\0\"\0\x0f\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x1f\0\0\0\f\0\0\0!\0#\0\0\0\x05\0\0\0\x06\0\x04\0*\0\x11\0\0\0\0\0\x07\0\0\0\0\0\b\0\x03\0-\0S\0\t\0>\0=\0~\0\x12\0c\0r\0\x8c\0\0\0\0\0\0\0\x8b\0\x10\0R\0 \0\0\0\0\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x86\0b\0Q\0\x0e\0\x84\0^\0`\0\\\0<\0,\0%\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x18\0\x19\0\x1a\0\x1b\0\x1c\0\x1d\0\x1e\0\x18\0]\0&\0\x85\0'\0a\0(\0)\0%\0.\x007\0_\0;\0+\0$\x000\0/\x001\x002\x003\x004\x005\x006\0-\x008\0\x17\x009\0:\0@\0?\0H\0A\0B\0C\0D\0E\0F\0G\0>\0I\0J\0K\0L\0M\0N\0O\0P\0=\0T\0U\0V\0W\0X\0Y\0Z\0[\0S\0m\0d\0e\0f\0g\0h\0i\0j\0n\0k\0l\0c\0y\0o\0p\0q\0s\0t\0u\0v\0w\0x\0`\0z\0{\0|\0}\0\\\0\x7f\0\x80\0\x81\0\x82\0\x83\0^\0\x87\0\x88\0\x89\0\x91\0\x8d\0\x8e\0\x8f\0\x90\0\x86\0\x92\0\x93\0\x94\0\x84\0\0\0\x
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x16\0\x16\0\0\0\xff\xff\x16\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x89\0\x16\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\xff\xff\0\0\xff\xff\r\0\"\0\xff\xff\0\0\xff\xff\0\0\0\0\b\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0,\0R\0\0\0<\0<\0]\0\0\0b\0q\0\x8a\0\xff\xff\xff\xff\xff\xff\x8a\0\0\0\x05\0\x0f\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\x05\0\0\0\x03\0\x04\0\x04\0\x04\0\x06\0\x07\0\t\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x12\0\x17\0\x19\0\x1a\0\x1b\0\x1c\0\x1d\0\x1e\0\x04\0$\0\x03\0&\0\x04\0'\0(\0)\0+\0/\0\x04\0\x06\0\x07\0\t\0.\0.\x000\x001\x002\x003\x004\x005\x006\x007\0\x12\x008\x009\0;\0;\0?\0@\0A\0B\0C\0D\0E\0F\0G\0H\0I\0J\0K\0L\0M\0N\0O\0P\0Q\0T\0U\0V\0W\0X\0Y\0Z\0[\0_\0a\0d\0e\0f\0g\0h\0i\0_\0j\0k\0l\0m\0n\0o\0p\0r\0s\0t\0u\0v\0w\0x\0y\0z\0{\0|\0}\0~\0\x7f\0\x80\0\x81\0\x82\0\x83\0\x85\0\x87\0\x88\0\x8b\0\x8c\0\x8d\0\x8e\0\x8f\0\x90\0\x91\0\x92\0\x93\0\x94\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Stdlib = global_data.Stdlib,
    SyntaxError =
      [248, "Interp__Lexer.SyntaxError", runtime.caml_fresh_oo_id(0)],
    _a_ = [1, 1],
    _b_ = [1, 0],
    cst_Unexpected_character = "Unexpected character: ";
   function read$0(counter, lexbuf){
    var _d_ = 0;
    if(counter >= 50)
     return caml_trampoline_return(ocaml_lex_read_rec$0, [0, lexbuf, _d_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_read_rec$0(counter$0, lexbuf, _d_);
   }
   function ocaml_lex_read_rec$0(counter, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(28 >= ocaml_lex_state$1 >>> 0)
      switch(ocaml_lex_state$1){
        case 0:
         if(counter >= 50) return caml_trampoline_return(read$0, [0, lexbuf]);
         var counter$0 = counter + 1 | 0;
         return read$0(counter$0, lexbuf);
        case 1:
         return [2, caml_call1(Stdlib_Lexing[8], lexbuf)];
        case 2:
         return 7;
        case 3:
         return 1;
        case 4:
         return _a_;
        case 5:
         return _b_;
        case 6:
         return 3;
        case 7:
         return 22;
        case 8:
         return 4;
        case 9:
         return 9;
        case 10:
         return 10;
        case 11:
         return [0,
                 runtime.caml_int_of_string
                  (caml_call1(Stdlib_Lexing[8], lexbuf))];
        case 12:
         return 19;
        case 13:
         return 2;
        case 14:
         return 8;
        case 15:
         return 11;
        case 16:
         return 20;
        case 17:
         return 21;
        case 18:
         return 17;
        case 19:
         return 15;
        case 20:
         return 16;
        case 21:
         return 12;
        case 22:
         return 14;
        case 23:
         return 18;
        case 24:
         return 0;
        case 25:
         return 6;
        case 26:
         return 5;
        case 27:
         var _c_ = caml_call1(Stdlib_Lexing[8], lexbuf);
         throw caml_maybe_attach_backtrace
                ([0,
                  SyntaxError,
                  caml_call2(Stdlib[28], cst_Unexpected_character, _c_)],
                 1);
        default: return 13;
      }
     caml_call1(lexbuf[1], lexbuf);
     var ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function read(lexbuf){return caml_trampoline(read$0(0, lexbuf));}
   function ocaml_lex_read_rec(lexbuf, ocaml_lex_state){
    return caml_trampoline(ocaml_lex_read_rec$0(0, lexbuf, ocaml_lex_state));
   }
   var
    Interp_Lexer =
      [0, SyntaxError, ocaml_lex_tables, read, ocaml_lex_read_rec];
   runtime.caml_register_global(7, Interp_Lexer, "Interp__Lexer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp
//# unitInfo: Requires: Interp__Ast, Interp__Lexer, Interp__Parser, Interp__Rules, Interp__Validate, Stdlib, Stdlib__Int, Stdlib__Lexing, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Line$1 = "Line ",
    cst_cannot_refrence_itself$1 = "cannot refrence itself",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Interp_Validate = global_data.Interp__Validate,
    Stdlib_List = global_data.Stdlib__List,
    Interp_Ast = global_data.Interp__Ast,
    Interp_Rules = global_data.Interp__Rules,
    Stdlib = global_data.Stdlib,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Interp_Lexer = global_data.Interp__Lexer,
    Interp_Parser = global_data.Interp__Parser,
    SyntaxError = Interp_Lexer[1],
    ParserError = Interp_Parser[1],
    SelfRef = [248, "Interp.SelfRef", runtime.caml_fresh_oo_id(0)],
    cst_cannot_refrence_itself = cst_cannot_refrence_itself$1,
    cst_Line = cst_Line$1,
    cst_cannot_refrence_itself$0 = cst_cannot_refrence_itself$1,
    cst_Line$0 = cst_Line$1,
    cst_Precondition_violated = "Precondition violated";
   function interp(s){
    try{
     var
      _a_ = caml_call2(Stdlib_Lexing[3], 0, s),
      _b_ = caml_call1(caml_call1(Interp_Parser[2], Interp_Lexer[3]), _a_),
      lines = caml_call1(Stdlib_List[10], _b_),
      aux =
        function(length, lines, param){
         switch(param[0]){
           case 0:
            var p = param[1]; return [0, p];
           case 1:
            var match = param[2];
            if(3 === match[0]){
             var prop = param[3], i = match[1], rule = param[1];
             if(0 !== i)
              return [1,
                      rule,
                      aux
                       (length,
                        lines,
                        caml_call2(Stdlib_List[8], lines, length - i | 0)),
                      prop];
             var
              _g_ = caml_call1(Stdlib_Int[12], length),
              _h_ = caml_call2(Stdlib[28], _g_, cst_cannot_refrence_itself);
             throw caml_maybe_attach_backtrace
                    ([0, SelfRef, caml_call2(Stdlib[28], cst_Line, _h_)], 1);
            }
            break;
           case 2:
            var _i_ = param[2];
            if(3 === _i_[0]){
             var match$0 = param[3];
             if(3 === match$0[0]){
              var
               prop$0 = param[4],
               i2 = match$0[1],
               i1 = _i_[1],
               rule$0 = param[1];
              if(0 !== i1 && 0 !== i2){
               var
                _l_ =
                  aux
                   (length,
                    lines,
                    caml_call2(Stdlib_List[8], lines, length - i2 | 0));
               return [2,
                       rule$0,
                       aux
                        (length,
                         lines,
                         caml_call2(Stdlib_List[8], lines, length - i1 | 0)),
                       _l_,
                       prop$0];
              }
              var
               _j_ = caml_call1(Stdlib_Int[12], length),
               _k_ = caml_call2(Stdlib[28], _j_, cst_cannot_refrence_itself$0);
              throw caml_maybe_attach_backtrace
                     ([0, SelfRef, caml_call2(Stdlib[28], cst_Line$0, _k_)], 1);
             }
            }
            break;
         }
         return caml_call1(Stdlib[2], cst_Precondition_violated);
        },
      _c_ = caml_call1(Stdlib_List[6], lines),
      _f_ = aux(caml_call1(Stdlib_List[1], lines), lines, _c_);
     caml_call1(Interp_Validate[14], _f_);
     var
      _d_ = caml_call1(Stdlib_List[6], lines),
      _e_ = caml_call1(Interp_Ast[4], _d_);
     return _e_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Interp_Rules[1]){var msg = exn[2]; return msg;}
     if(exn[1] === Stdlib[7]) return cst;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var Interp = [0, SyntaxError, ParserError, SelfRef, interp];
   runtime.caml_register_global(16, Interp, "Interp");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
