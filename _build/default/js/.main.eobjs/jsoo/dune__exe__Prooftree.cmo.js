// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.5.2

//# unitInfo: Provides: Dune__exe__Prooftree
//# unitInfo: Requires: Dune__exe__Rules, Line, Stdlib__Hashtbl
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Dune_exe_Rules = global_data.Dune__exe__Rules,
    Line = global_data.Line,
    lines = caml_call2(Stdlib_Hashtbl[1], 0, 40);
   function addline(linenum, line){
    var _c_ = caml_call1(Line[9], line);
    caml_call3(Stdlib_Hashtbl[5], lines, linenum, _c_);
    var _d_ = caml_call1(Stdlib_Hashtbl[6], lines);
    return caml_call2(Dune_exe_Rules[1], _d_, linenum);
   }
   function editline(linenum, line){
    var _a_ = caml_call1(Line[9], line);
    caml_call3(Stdlib_Hashtbl[11], lines, linenum, _a_);
    var _b_ = caml_call1(Stdlib_Hashtbl[6], lines);
    return caml_call2(Dune_exe_Rules[1], _b_, linenum);
   }
   function deleteline(linenum){
    caml_call2(Stdlib_Hashtbl[10], lines, linenum);
    return caml_call1(Dune_exe_Rules[2], lines);
   }
   var Dune_exe_Prooftree = [0, lines, addline, editline, deleteline];
   runtime.caml_register_global(3, Dune_exe_Prooftree, "Dune__exe__Prooftree");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiIubWFpbi5lb2Jqcy9qc29vL2R1bmVfX2V4ZV9fUHJvb2Z0cmVlLmNtby5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJsaW5lcyIsImFkZGxpbmUiLCJsaW5lbnVtIiwibGluZSIsImVkaXRsaW5lIiwiZGVsZXRlbGluZSJdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2Vfcm9vdC9qcy9wcm9vZnRyZWUubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztHOzs7OztHOzs7OztHOzs7OztHQUVvQzs7Ozs7SUFBaENBLFFBQWdDO1lBRWhDQyxRQUFRQyxTQUFRQztJQUNRLFVBQUEsb0JBRFJBO0lBQ2xCLDhCQUhFSCxPQUVRRTtJQUVLLFVBQUEsOEJBSmJGO0lBR0YsT0FBQSxtQ0FEVUU7R0FFaUM7WUFFekNFLFNBQVNGLFNBQVFDO0lBQ1csVUFBQSxvQkFEWEE7SUFDbkIsK0JBUEVILE9BTVNFO0lBRUksVUFBQSw4QkFSYkY7SUFPRixPQUFBLG1DQURXRTtHQUVnQztZQUV6Q0csV0FBV0g7SUFDYiwrQkFYRUYsT0FVV0U7eUNBVlhGO0dBWW1CO2dDQVpuQkEsT0FFQUMsU0FJQUcsVUFJQUM7OztFIiwic291cmNlc0NvbnRlbnQiOlsib3BlbiBMaW5lXG5cbmxldCBsaW5lcyA6IChpbnQsIGxpbmUpIEhhc2h0YmwudCA9IEhhc2h0YmwuY3JlYXRlIDQwXG5cbmxldCBhZGRsaW5lIGxpbmVudW0gbGluZSA9XG4gIEhhc2h0YmwuYWRkIGxpbmVzIGxpbmVudW0gKExpbmUuaW50ZXJwIGxpbmUpIDtcbiAgUnVsZXMuaXNfdmFsaWQgKEhhc2h0YmwuZmluZCBsaW5lcykgbGluZW51bVxuXG5sZXQgZWRpdGxpbmUgbGluZW51bSBsaW5lID1cbiAgSGFzaHRibC5yZXBsYWNlIGxpbmVzIGxpbmVudW0gKExpbmUuaW50ZXJwIGxpbmUpIDtcbiAgUnVsZXMuaXNfdmFsaWQgKEhhc2h0YmwuZmluZCBsaW5lcykgbGluZW51bVxuXG5sZXQgZGVsZXRlbGluZSBsaW5lbnVtID1cbiAgSGFzaHRibC5yZW1vdmUgbGluZXMgbGluZW51bSA7XG4gIFJ1bGVzLmFsbF92YWxpZCBsaW5lc1xuIl19
