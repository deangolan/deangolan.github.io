// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.5.2

//# unitInfo: Provides: Line__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Line = [0], Line$0 = [0, Line];
   runtime.caml_register_global(0, Line$0, "Line__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Line__Ast
//# unitInfo: Requires: Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst$4 = " =",
    cst_a = "%a",
    cst_d = "%d",
    cst$0 = "(@[",
    cst$2 = ",@ ",
    cst_2 = "<2>",
    cst_hov = "<hov>",
    cst$1 = "@ ",
    cst_s = "@[%s =@ ",
    cst$5 = "@]",
    cst$3 = "@])",
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    _G_ = [0, [12, 40, [18, [1, [0, 0, cst]], 0]], cst$0],
    _H_ = [0, [4, 0, 0, 0, 0], cst_d],
    _I_ = [0, [12, 44, [17, [0, cst$1, 1, 0], 0]], cst$2],
    _J_ = [0, [4, 0, 0, 0, 0], cst_d],
    _K_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _q_ = [0, [12, 40, [18, [1, [0, 0, cst]], 0]], cst$0],
    _r_ = [0, [4, 0, 0, 0, 0], cst_d],
    _s_ = [0, [12, 44, [17, [0, cst$1, 1, 0], 0]], cst$2],
    _t_ = [0, [4, 0, 0, 0, 0], cst_d],
    _u_ = [0, [17, 0, [12, 41, 0]], cst$3],
    cst_Premise = "`Premise",
    _a_ =
      [0,
       [11, "`Distributive (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Distributive (@[<hov>"],
    _b_ = [0, [4, 0, 0, 0, 0], cst_d],
    _c_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _d_ =
      [0,
       [11, "`Dominance (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Dominance (@[<hov>"],
    _e_ = [0, [4, 0, 0, 0, 0], cst_d],
    _f_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _g_ =
      [0,
       [11, "`DeMorgan (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`DeMorgan (@[<hov>"],
    _h_ = [0, [4, 0, 0, 0, 0], cst_d],
    _i_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _j_ =
      [0,
       [11, "`Identity (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Identity (@[<hov>"],
    _k_ = [0, [4, 0, 0, 0, 0], cst_d],
    _l_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _m_ =
      [0,
       [11, "`Idempotence (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Idempotence (@[<hov>"],
    _n_ = [0, [4, 0, 0, 0, 0], cst_d],
    _o_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _p_ =
      [0,
       [11, "`ModusPonens (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`ModusPonens (@[<hov>"],
    _v_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _z_ =
      [0,
       [11, "`LE (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`LE (@[<hov>"],
    _A_ = [0, [4, 0, 0, 0, 0], cst_d],
    _B_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _C_ =
      [0,
       [11, "`Associative (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Associative (@[<hov>"],
    _D_ = [0, [4, 0, 0, 0, 0], cst_d],
    _E_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _F_ =
      [0,
       [11, "`ModusTollens (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`ModusTollens (@[<hov>"],
    _L_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _M_ =
      [0,
       [11, "`Commutative (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Commutative (@[<hov>"],
    _N_ = [0, [4, 0, 0, 0, 0], cst_d],
    _O_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _w_ =
      [0,
       [11, "`DoubleNegation (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`DoubleNegation (@[<hov>"],
    _x_ = [0, [4, 0, 0, 0, 0], cst_d],
    _y_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _P_ = [0, [15, 0], cst_a],
    cst_Impl = "`Impl",
    cst_Iff = "`Iff",
    cst_And = "`And",
    cst_Or = "`Or",
    _Q_ = [0, [15, 0], cst_a],
    _al_ = [0, [15, 0], cst_a],
    _ae_ =
      [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [11, "{ ", 0]], "@[<2>{ "],
    cst_Ast_prop = "Ast.prop",
    _af_ =
      [0,
       [18, [1, [0, 0, cst]], [2, 0, [11, cst$4, [17, [0, cst$1, 1, 0], 0]]]],
       cst_s],
    _ag_ = [0, [17, 0, 0], cst$5],
    _ah_ = [0, [12, 59, [17, [0, cst$1, 1, 0], 0]], ";@ "],
    cst_derivedby = "derivedby",
    _ai_ =
      [0,
       [18, [1, [0, 0, cst]], [2, 0, [11, cst$4, [17, [0, cst$1, 1, 0], 0]]]],
       cst_s],
    _aj_ = [0, [17, 0, 0], cst$5],
    _ak_ = [0, [17, [0, cst$1, 1, 0], [12, 125, [17, 0, 0]]], "@ }@]"],
    _ad_ = [0, [15, 0], cst_a],
    _S_ = [0, [12, 40, [18, [1, [0, 0, cst]], 0]], cst$0],
    _T_ = [0, [12, 44, [17, [0, cst$1, 1, 0], 0]], cst$2],
    _U_ = [0, [12, 44, [17, [0, cst$1, 1, 0], 0]], cst$2],
    _V_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _R_ =
      [0,
       [11, "`Conn (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Conn (@[<hov>"],
    _W_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _X_ =
      [0,
       [11, "`Bool (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Bool (@[<hov>"],
    _Y_ = [0, [9, 0, 0], "%B"],
    _Z_ = [0, [17, 0, [12, 41, 0]], cst$3],
    ___ =
      [0,
       [11, "`Atom (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Atom (@[<hov>"],
    _$_ = [0, [3, 0, 0], "%S"],
    _aa_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _ab_ =
      [0,
       [11, "`Not (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Not (@[<hov>"],
    _ac_ = [0, [17, 0, [12, 41, 0]], cst$3];
   function pp_rule(fmt, param){
    if(typeof param === "number")
     return caml_call2(Stdlib_Format[13], fmt, cst_Premise);
    var _ay_ = param[1];
    if(179928923 <= _ay_){
     if(316735838 > _ay_){
      if(282006685 <= _ay_){
       var x$3 = param[2];
       caml_call2(Stdlib_Format[137], fmt, _m_);
       caml_call1(caml_call2(Stdlib_Format[137], fmt, _n_), x$3);
       return caml_call2(Stdlib_Format[137], fmt, _o_);
      }
      var x$4 = param[2];
      caml_call2(Stdlib_Format[137], fmt, _p_);
      var a1 = x$4[2], a0 = x$4[1];
      caml_call2(Stdlib_Format[137], fmt, _q_);
      caml_call1(caml_call2(Stdlib_Format[137], fmt, _r_), a0);
      caml_call2(Stdlib_Format[137], fmt, _s_);
      caml_call1(caml_call2(Stdlib_Format[137], fmt, _t_), a1);
      caml_call2(Stdlib_Format[137], fmt, _u_);
      return caml_call2(Stdlib_Format[137], fmt, _v_);
     }
     if(463545110 <= _ay_){
      if(696721332 <= _ay_){
       var x = param[2];
       caml_call2(Stdlib_Format[137], fmt, _a_);
       caml_call1(caml_call2(Stdlib_Format[137], fmt, _b_), x);
       return caml_call2(Stdlib_Format[137], fmt, _c_);
      }
      var x$0 = param[2];
      caml_call2(Stdlib_Format[137], fmt, _d_);
      caml_call1(caml_call2(Stdlib_Format[137], fmt, _e_), x$0);
      return caml_call2(Stdlib_Format[137], fmt, _f_);
     }
     if(402400965 <= _ay_){
      var x$1 = param[2];
      caml_call2(Stdlib_Format[137], fmt, _g_);
      caml_call1(caml_call2(Stdlib_Format[137], fmt, _h_), x$1);
      return caml_call2(Stdlib_Format[137], fmt, _i_);
     }
     var x$2 = param[2];
     caml_call2(Stdlib_Format[137], fmt, _j_);
     caml_call1(caml_call2(Stdlib_Format[137], fmt, _k_), x$2);
     return caml_call2(Stdlib_Format[137], fmt, _l_);
    }
    if(-641755978 === _ay_){
     var x$5 = param[2];
     caml_call2(Stdlib_Format[137], fmt, _w_);
     caml_call1(caml_call2(Stdlib_Format[137], fmt, _x_), x$5);
     return caml_call2(Stdlib_Format[137], fmt, _y_);
    }
    if(-530603023 <= _ay_){
     if(17017 <= _ay_){
      var x$6 = param[2];
      caml_call2(Stdlib_Format[137], fmt, _z_);
      caml_call1(caml_call2(Stdlib_Format[137], fmt, _A_), x$6);
      return caml_call2(Stdlib_Format[137], fmt, _B_);
     }
     var x$7 = param[2];
     caml_call2(Stdlib_Format[137], fmt, _C_);
     caml_call1(caml_call2(Stdlib_Format[137], fmt, _D_), x$7);
     return caml_call2(Stdlib_Format[137], fmt, _E_);
    }
    if(-608679825 <= _ay_){
     var x$8 = param[2];
     caml_call2(Stdlib_Format[137], fmt, _F_);
     var a1$0 = x$8[2], a0$0 = x$8[1];
     caml_call2(Stdlib_Format[137], fmt, _G_);
     caml_call1(caml_call2(Stdlib_Format[137], fmt, _H_), a0$0);
     caml_call2(Stdlib_Format[137], fmt, _I_);
     caml_call1(caml_call2(Stdlib_Format[137], fmt, _J_), a1$0);
     caml_call2(Stdlib_Format[137], fmt, _K_);
     return caml_call2(Stdlib_Format[137], fmt, _L_);
    }
    var x$9 = param[2];
    caml_call2(Stdlib_Format[137], fmt, _M_);
    caml_call1(caml_call2(Stdlib_Format[137], fmt, _N_), x$9);
    return caml_call2(Stdlib_Format[137], fmt, _O_);
   }
   function show_rule(x){
    return caml_call3(Stdlib_Format[141], _P_, pp_rule, x);
   }
   function pp_conn(fmt, param){
    return 3653065 <= param
            ? 814983936
              <= param
              ? caml_call2(Stdlib_Format[13], fmt, cst_Impl)
              : caml_call2(Stdlib_Format[13], fmt, cst_Iff)
            : 3257015
              <= param
              ? caml_call2(Stdlib_Format[13], fmt, cst_And)
              : caml_call2(Stdlib_Format[13], fmt, cst_Or);
   }
   function show_conn(x){
    return caml_call3(Stdlib_Format[141], _Q_, pp_conn, x);
   }
   var
    pp_prop = function _ax_(_av_, _aw_){return _ax_.fun(_av_, _aw_);},
    show_prop = function _au_(_at_){return _au_.fun(_at_);};
   caml_update_dummy
    (pp_prop,
     function(fmt, param){
      var _as_ = param[1];
      if(737456202 <= _as_){
       if(748545548 <= _as_){
        var x = param[2];
        caml_call2(Stdlib_Format[137], fmt, _R_);
        var a2 = x[3], a1 = x[2], a0 = x[1];
        caml_call2(Stdlib_Format[137], fmt, _S_);
        pp_conn(fmt, a0);
        caml_call2(Stdlib_Format[137], fmt, _T_);
        caml_call1(caml_call1(pp_prop, fmt), a1);
        caml_call2(Stdlib_Format[137], fmt, _U_);
        caml_call1(caml_call1(pp_prop, fmt), a2);
        caml_call2(Stdlib_Format[137], fmt, _V_);
        return caml_call2(Stdlib_Format[137], fmt, _W_);
       }
       var x$0 = param[2];
       caml_call2(Stdlib_Format[137], fmt, _X_);
       caml_call1(caml_call2(Stdlib_Format[137], fmt, _Y_), x$0);
       return caml_call2(Stdlib_Format[137], fmt, _Z_);
      }
      if(726615281 <= _as_){
       var x$1 = param[2];
       caml_call2(Stdlib_Format[137], fmt, ___);
       caml_call1(caml_call2(Stdlib_Format[137], fmt, _$_), x$1);
       return caml_call2(Stdlib_Format[137], fmt, _aa_);
      }
      var x$2 = param[2];
      caml_call2(Stdlib_Format[137], fmt, _ab_);
      caml_call1(caml_call1(pp_prop, fmt), x$2);
      return caml_call2(Stdlib_Format[137], fmt, _ac_);
     });
   caml_update_dummy
    (show_prop,
     function(x){return caml_call3(Stdlib_Format[141], _ad_, pp_prop, x);});
   var
    pp_line = function _ar_(_ap_, _aq_){return _ar_.fun(_ap_, _aq_);},
    show_line = function _ao_(_an_){return _ao_.fun(_an_);};
   caml_update_dummy
    (pp_line,
     function(fmt, x){
      caml_call2(Stdlib_Format[137], fmt, _ae_);
      caml_call3(Stdlib_Format[137], fmt, _af_, cst_Ast_prop);
      var _am_ = x[1];
      caml_call1(caml_call1(pp_prop, fmt), _am_);
      caml_call2(Stdlib_Format[137], fmt, _ag_);
      caml_call2(Stdlib_Format[137], fmt, _ah_);
      caml_call3(Stdlib_Format[137], fmt, _ai_, cst_derivedby);
      pp_rule(fmt, x[2]);
      caml_call2(Stdlib_Format[137], fmt, _aj_);
      return caml_call2(Stdlib_Format[137], fmt, _ak_);
     });
   caml_update_dummy
    (show_line,
     function(x){return caml_call3(Stdlib_Format[141], _al_, pp_line, x);});
   var
    Line_Ast =
      [0,
       pp_rule,
       show_rule,
       pp_conn,
       show_conn,
       pp_prop,
       show_prop,
       pp_line,
       show_line];
   runtime.caml_register_global(74, Line_Ast, "Line__Ast");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Line__Parser
//# unitInfo: Requires: Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var global_data = runtime.caml_get_global_data();
   global_data.Stdlib__Printf;
   global_data.Assert_failure;
   var
    Error =
      [248, "Line__Parser.MenhirBasics.Error", runtime.caml_fresh_oo_id(0)];
   function eRR(s){throw caml_maybe_attach_backtrace(Error, 1);}
   function menhir_goto_rule(menhir_stack, r, tok){
    var p = menhir_stack[3], v = [0, p, r];
    if(typeof tok === "number" && 12 === tok){var v$0 = [0, v]; return v$0;}
    return eRR(0);
   }
   function menhir_run_01$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var menhir_stack$0 = menhir_stack, menhir_s$0 = menhir_s;
    for(;;){
     var
      menhir_stack$1 = [0, menhir_stack$0, menhir_s$0],
      tok = caml_call1(menhir_lexer, menhir_lexbuf),
      menhir_s$1 = 1;
     if(typeof tok === "number")
      switch(tok){
        case 3:
         var menhir_stack$0 = menhir_stack$1, menhir_s$0 = menhir_s$1;
         continue;
        case 6:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_02$0,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
         var counter$2 = counter + 1 | 0;
         return menhir_run_02$0
                 (counter$2,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$1);
      }
     else
      switch(tok[0]){
        case 1:
         var v = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_03$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v,
                    menhir_s$1]);
         var counter$1 = counter + 1 | 0;
         return menhir_run_03$0
                 (counter$1,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s$1);
        case 2:
         var v$0 = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_04$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s$1]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_04$0
                 (counter$0,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s$1);
      }
     return eRR(0);
    }
   }
   function menhir_run_02$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var menhir_stack$0 = menhir_stack, menhir_s$0 = menhir_s;
    for(;;){
     var
      menhir_stack$1 = [0, menhir_stack$0, menhir_s$0],
      tok = caml_call1(menhir_lexer, menhir_lexbuf),
      menhir_s$1 = 2;
     if(typeof tok === "number")
      switch(tok){
        case 3:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_01$0,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
         var counter$2 = counter + 1 | 0;
         return menhir_run_01$0
                 (counter$2,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$1);
        case 6:
         var menhir_stack$0 = menhir_stack$1, menhir_s$0 = menhir_s$1;
         continue;
      }
     else
      switch(tok[0]){
        case 1:
         var v = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_03$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v,
                    menhir_s$1]);
         var counter$1 = counter + 1 | 0;
         return menhir_run_03$0
                 (counter$1,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s$1);
        case 2:
         var v$0 = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_04$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s$1]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_04$0
                 (counter$0,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s$1);
      }
     return eRR(0);
    }
   }
   function menhir_run_03$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, b, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, 737456202, b];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_prop,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_prop
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_goto_prop
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v$4, menhir_s, tok){
    var
     menhir_stack$0 = menhir_stack,
     p2 = v$4,
     menhir_s$0 = menhir_s,
     tok$0 = tok;
    for(;;)
     a:
     switch(menhir_s$0){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_17,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   p2,
                   menhir_s$0,
                   tok$0]);
        var counter$12 = counter + 1 | 0;
        return menhir_run_17
                (counter$12,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 p2,
                 menhir_s$0,
                 tok$0);
       case 1:
        var
         menhir_s$1 = menhir_stack$0[2],
         menhir_stack$1 = menhir_stack$0[1],
         v$3 = [0, 3903731, p2],
         menhir_stack$0 = menhir_stack$1,
         p2 = v$3,
         menhir_s$0 = menhir_s$1;
        break;
       case 2:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 0:
            var
             tok$1 = caml_call1(menhir_lexer, menhir_lexbuf),
             menhir_s$6 = menhir_stack$0[2],
             menhir_stack$14 = menhir_stack$0[1],
             menhir_stack$0 = menhir_stack$14,
             menhir_s$0 = menhir_s$6,
             tok$0 = tok$1;
            break a;
           case 2:
            var menhir_stack$15 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$15, menhir_lexbuf, menhir_lexer]);
            var counter$11 = counter + 1 | 0;
            return menhir_run_07
                    (counter$11, menhir_stack$15, menhir_lexbuf, menhir_lexer);
           case 8:
            var menhir_stack$16 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$16, menhir_lexbuf, menhir_lexer]);
            var counter$7 = counter + 1 | 0;
            return menhir_run_09
                    (counter$7, menhir_stack$16, menhir_lexbuf, menhir_lexer);
           case 9:
            var menhir_stack$17 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_13,
                      [0, menhir_stack$17, menhir_lexbuf, menhir_lexer]);
            var counter$4 = counter + 1 | 0;
            return menhir_run_13
                    (counter$4, menhir_stack$17, menhir_lexbuf, menhir_lexer);
           case 20:
            var menhir_stack$18 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_11,
                      [0, menhir_stack$18, menhir_lexbuf, menhir_lexer]);
            var counter$2 = counter + 1 | 0;
            return menhir_run_11
                    (counter$2, menhir_stack$18, menhir_lexbuf, menhir_lexer);
         }
        return eRR(0);
       case 3:
        var
         p1$2 = menhir_stack$0[3],
         menhir_s$5 = menhir_stack$0[2],
         menhir_stack$13 = menhir_stack$0[1],
         v = [0, 748545548, [0, 17731, p1$2, p2]],
         menhir_stack$0 = menhir_stack$13,
         p2 = v,
         menhir_s$0 = menhir_s$5;
        break;
       case 4:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 2:
            var menhir_stack$10 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$10, menhir_lexbuf, menhir_lexer]);
            var counter$10 = counter + 1 | 0;
            return menhir_run_07
                    (counter$10, menhir_stack$10, menhir_lexbuf, menhir_lexer);
           case 8:
            var menhir_stack$11 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$11, menhir_lexbuf, menhir_lexer]);
            var counter$6 = counter + 1 | 0;
            return menhir_run_09
                    (counter$6, menhir_stack$11, menhir_lexbuf, menhir_lexer);
           case 20:
            var menhir_stack$12 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_11,
                      [0, menhir_stack$12, menhir_lexbuf, menhir_lexer]);
            var counter$1 = counter + 1 | 0;
            return menhir_run_11
                    (counter$1, menhir_stack$12, menhir_lexbuf, menhir_lexer);
           case 0:
           case 9:
           case 18:
            var
             p1$1 = menhir_stack$0[3],
             menhir_s$4 = menhir_stack$0[2],
             menhir_stack$9 = menhir_stack$0[1],
             v$1 = [0, 748545548, [0, 814983936, p1$1, p2]],
             menhir_stack$0 = menhir_stack$9,
             p2 = v$1,
             menhir_s$0 = menhir_s$4;
            break a;
         }
        return eRR(0);
       case 5:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 2:
            var menhir_stack$8 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$8, menhir_lexbuf, menhir_lexer]);
            var counter$9 = counter + 1 | 0;
            return menhir_run_07
                    (counter$9, menhir_stack$8, menhir_lexbuf, menhir_lexer);
           case 0:
           case 8:
           case 9:
           case 18:
           case 20:
            var
             p1$0 = menhir_stack$0[3],
             menhir_s$3 = menhir_stack$0[2],
             menhir_stack$7 = menhir_stack$0[1],
             v$0 = [0, 748545548, [0, 3257015, p1$0, p2]],
             menhir_stack$0 = menhir_stack$7,
             p2 = v$0,
             menhir_s$0 = menhir_s$3;
            break a;
         }
        return eRR(0);
       default:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 2:
            var menhir_stack$3 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$3, menhir_lexbuf, menhir_lexer]);
            var counter$8 = counter + 1 | 0;
            return menhir_run_07
                    (counter$8, menhir_stack$3, menhir_lexbuf, menhir_lexer);
           case 8:
            var menhir_stack$4 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$4, menhir_lexbuf, menhir_lexer]);
            var counter$5 = counter + 1 | 0;
            return menhir_run_09
                    (counter$5, menhir_stack$4, menhir_lexbuf, menhir_lexer);
           case 9:
            var menhir_stack$5 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_13,
                      [0, menhir_stack$5, menhir_lexbuf, menhir_lexer]);
            var counter$3 = counter + 1 | 0;
            return menhir_run_13
                    (counter$3, menhir_stack$5, menhir_lexbuf, menhir_lexer);
           case 20:
            var menhir_stack$6 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_11,
                      [0, menhir_stack$6, menhir_lexbuf, menhir_lexer]);
            var counter$0 = counter + 1 | 0;
            return menhir_run_11
                    (counter$0, menhir_stack$6, menhir_lexbuf, menhir_lexer);
           case 0:
           case 18:
            var
             p1 = menhir_stack$0[3],
             menhir_s$2 = menhir_stack$0[2],
             menhir_stack$2 = menhir_stack$0[1],
             v$2 = [0, 748545548, [0, 3653065, p1, p2]],
             menhir_stack$0 = menhir_stack$2,
             p2 = v$2,
             menhir_s$0 = menhir_s$2;
            break a;
         }
        return eRR(0);
     }
   }
   function menhir_run_17
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v$9, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v$9];
    if(typeof tok === "number")
     switch(tok){
       case 2:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_07,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_07
                (counter$3, menhir_stack$0, menhir_lexbuf, menhir_lexer);
       case 8:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_09,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_09
                (counter$2, menhir_stack$0, menhir_lexbuf, menhir_lexer);
       case 9:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_13,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_13
                (counter$1, menhir_stack$0, menhir_lexbuf, menhir_lexer);
       case 18:
        var tok$0 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 1:
            var tok$1 = caml_call1(menhir_lexer, menhir_lexbuf);
            return menhir_goto_rule(menhir_stack$0, 54077553, tok$1);
           case 4:
            var tok$2 = caml_call1(menhir_lexer, menhir_lexbuf);
            if(typeof tok$2 !== "number" && 0 === tok$2[0]){
             var
              v_1 = tok$2[1],
              tok$3 = caml_call1(menhir_lexer, menhir_lexbuf);
             if(typeof tok$3 === "number" && 16 === tok$3){
              var tok$4 = caml_call1(menhir_lexer, menhir_lexbuf);
              if(typeof tok$4 !== "number" && 0 === tok$4[0]){
               var
                v_2 = tok$4[1],
                tok$5 = caml_call1(menhir_lexer, menhir_lexbuf),
                v$8 = [0, -608679825, [0, v_1, v_2]];
               return menhir_goto_rule(menhir_stack$0, v$8, tok$5);
              }
              return eRR(0);
             }
             return eRR(0);
            }
            return eRR(0);
           case 5:
            var tok$6 = caml_call1(menhir_lexer, menhir_lexbuf);
            if(typeof tok$6 !== "number" && 0 === tok$6[0]){
             var
              v_4 = tok$6[1],
              tok$7 = caml_call1(menhir_lexer, menhir_lexbuf);
             if(typeof tok$7 === "number" && 16 === tok$7){
              var tok$8 = caml_call1(menhir_lexer, menhir_lexbuf);
              if(typeof tok$8 !== "number" && 0 === tok$8[0]){
               var
                v_5 = tok$8[1],
                tok$9 = caml_call1(menhir_lexer, menhir_lexbuf),
                v$7 = [0, 179928923, [0, v_4, v_5]];
               return menhir_goto_rule(menhir_stack$0, v$7, tok$9);
              }
              return eRR(0);
             }
             return eRR(0);
            }
            return eRR(0);
           case 7:
            var tok$10 = caml_call1(menhir_lexer, menhir_lexbuf);
            if(typeof tok$10 !== "number" && 0 === tok$10[0]){
             var
              v_7 = tok$10[1],
              tok$11 = caml_call1(menhir_lexer, menhir_lexbuf),
              v = [0, 17017, v_7];
             return menhir_goto_rule(menhir_stack$0, v, tok$11);
            }
            return eRR(0);
           case 10:
            var tok$12 = caml_call1(menhir_lexer, menhir_lexbuf);
            if(typeof tok$12 !== "number" && 0 === tok$12[0]){
             var
              v_9 = tok$12[1],
              tok$13 = caml_call1(menhir_lexer, menhir_lexbuf),
              v$0 = [0, 282006685, v_9];
             return menhir_goto_rule(menhir_stack$0, v$0, tok$13);
            }
            return eRR(0);
           case 11:
            var tok$14 = caml_call1(menhir_lexer, menhir_lexbuf);
            if(typeof tok$14 !== "number" && 0 === tok$14[0]){
             var
              v_11 = tok$14[1],
              tok$15 = caml_call1(menhir_lexer, menhir_lexbuf),
              v$6 = [0, 316735838, v_11];
             return menhir_goto_rule(menhir_stack$0, v$6, tok$15);
            }
            return eRR(0);
           case 13:
            var tok$16 = caml_call1(menhir_lexer, menhir_lexbuf);
            if(typeof tok$16 !== "number" && 0 === tok$16[0]){
             var
              v_13 = tok$16[1],
              tok$17 = caml_call1(menhir_lexer, menhir_lexbuf),
              v$4 = [0, -641755978, v_13];
             return menhir_goto_rule(menhir_stack$0, v$4, tok$17);
            }
            return eRR(0);
           case 14:
            var tok$18 = caml_call1(menhir_lexer, menhir_lexbuf);
            if(typeof tok$18 !== "number" && 0 === tok$18[0]){
             var
              v_15 = tok$18[1],
              tok$19 = caml_call1(menhir_lexer, menhir_lexbuf),
              v$5 = [0, 402400965, v_15];
             return menhir_goto_rule(menhir_stack$0, v$5, tok$19);
            }
            return eRR(0);
           case 15:
            var tok$20 = caml_call1(menhir_lexer, menhir_lexbuf);
            if(typeof tok$20 !== "number" && 0 === tok$20[0]){
             var
              v_17 = tok$20[1],
              tok$21 = caml_call1(menhir_lexer, menhir_lexbuf),
              v$3 = [0, 696721332, v_17];
             return menhir_goto_rule(menhir_stack$0, v$3, tok$21);
            }
            return eRR(0);
           case 17:
            var tok$22 = caml_call1(menhir_lexer, menhir_lexbuf);
            if(typeof tok$22 !== "number" && 0 === tok$22[0]){
             var
              v_19 = tok$22[1],
              tok$23 = caml_call1(menhir_lexer, menhir_lexbuf),
              v$1 = [0, -816541094, v_19];
             return menhir_goto_rule(menhir_stack$0, v$1, tok$23);
            }
            return eRR(0);
           case 19:
            var tok$24 = caml_call1(menhir_lexer, menhir_lexbuf);
            if(typeof tok$24 !== "number" && 0 === tok$24[0]){
             var
              v_21 = tok$24[1],
              tok$25 = caml_call1(menhir_lexer, menhir_lexbuf),
              v$2 = [0, -530603023, v_21];
             return menhir_goto_rule(menhir_stack$0, v$2, tok$25);
            }
            return eRR(0);
         }
        return eRR(0);
       case 20:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_11,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_11
                (counter$0, menhir_stack$0, menhir_lexbuf, menhir_lexer);
     }
    return eRR(0);
   }
   function menhir_run_07(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 3;
    if(typeof tok === "number")
     switch(tok){
       case 3:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_04$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, a, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, 726615281, a];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_prop,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_prop
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_09(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 4;
    if(typeof tok === "number")
     switch(tok){
       case 3:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_13(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 6;
    if(typeof tok === "number")
     switch(tok){
       case 3:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_11(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 5;
    if(typeof tok === "number")
     switch(tok){
       case 3:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_01(menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_01$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_02(menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_02$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_03
   (menhir_stack, menhir_lexbuf, menhir_lexer, b, menhir_s){
    return caml_trampoline
            (menhir_run_03$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, b, menhir_s));
   }
   function menhir_run_04
   (menhir_stack, menhir_lexbuf, menhir_lexer, a, menhir_s){
    return caml_trampoline
            (menhir_run_04$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, a, menhir_s));
   }
   function prog(menhir_lexer, menhir_lexbuf){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_stack = 0;
    if(typeof tok === "number")
     switch(tok){
       case 3:
        return menhir_run_01(menhir_stack, menhir_lexbuf, menhir_lexer, 0);
       case 6:
        return menhir_run_02(menhir_stack, menhir_lexbuf, menhir_lexer, 0);
       case 12:
        return 0;
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        return menhir_run_03(menhir_stack, menhir_lexbuf, menhir_lexer, v, 0);
       case 2:
        var v$0 = tok[1];
        return menhir_run_04
                (menhir_stack, menhir_lexbuf, menhir_lexer, v$0, 0);
     }
    return eRR(0);
   }
   var Line_Parser = [0, Error, prog];
   runtime.caml_register_global(29, Line_Parser, "Line__Parser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Line__Lexer
//# unitInfo: Requires: Stdlib, Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       '\0\0\xe6\xff+\x004\0\r\x005\0A\0\0\x004\0\xf2\xffW\0\x01\0\0\0\xf6\xff\x01\0\xf7\xff\f\0\xf8\xff\xf9\xff\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff"\0\x1f\0\x02\0\x1d\0.\0(\0"\x001\0\xf5\xff\x01\0\xf4\xff2\0\xf1\xff+\x000\0(\x007\0\xf0\xff9\0\x01\0\xef\xff2\0-\x009\x003\0/\0\xe9\xff<\0\x02\0\xee\xff=\x006\x009\0\x02\0\xed\xff>\0\xea\xffA\0\xeb\xff<\0\0\0\xec\xff<\0H\0P\0G\0O\0\x04\0P\0P\0J\0X\0L\0X\0W\0\xe7\xffY\0\xe8\xffI\0L\0\x01\0\x05\0Q\0R\0T\0^\0V\0R\0Z\0b\0Z\0V\0',
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x01\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1a\0U\0\x1a\0\0\0\0\0\0\0\x0f\0\0\0\x15\0\x14\0\0\0\0\0\t\0\f\0!\0\x0e\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x16\0\x11\0\x0b\0\0\0 \0\"\0\0\0\x04\0\0\0\x05\0\x03\0)\0\x12\0\0\0\0\0\x06\0\0\0\0\0\x07\0\x02\0,\x005\0\b\0:\0H\0A\0\x13\0W\0\0\0\0\0\0\0V\0\0\0\0\0\x10\0\x0f\0\0\0\0\x009\0\x17\0\x17\0\x17\0\x17\0\x17\0\x18\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x19\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0Q\0\x11\0@\0\r\0O\x008\0<\0>\0\x1d\x004\0+\0$\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x1b\0\x1c\0\x13\0\x1e\0\x1f\0\x12\0%\0&\0'\0P\0(\0$\0?\0-\0,\0.\0/\x000\0=\x003\0*\0#\x001\x002\x006\x007\x005\0;\0:\0C\0B\0A\0J\0E\0F\0G\0I\0D\0>\0K\0L\0M\0N\0<\0R\0S\0T\0\\\0X\0Y\0Z\0[\0Q\0]\0^\0_\0O\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x1a\0\x1a\0\0\0\xff\xff\x1a\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0T\0\x1a\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0\xff\xff\f\0!\0\xff\xff\0\0\xff\xff\0\0\0\0\x07\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0+\x004\0\0\x009\0G\0@\0\0\0U\0\xff\xff\xff\xff\xff\xffU\0\xff\xff\xff\xff\0\0\x0e\0\xff\xff\xff\xff\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x02\0\x04\0\x03\0\x03\0\x18\0\x05\0\x06\0\b\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x19\0\x1b\0\x1c\0\x1d\0\x1e\0\x1f\0#\0%\0&\0\x02\0'\0(\0\x03\0*\0-\0-\0.\0/\0\x03\0\x05\0\x06\0\b\x000\x001\x003\x006\x007\x008\0;\0=\0?\0B\0C\0D\0E\0F\0H\0=\0I\0J\0K\0L\0M\0N\0P\0R\0S\0V\0W\0X\0Y\0Z\0[\0\\\0]\0^\0_\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    _a_ = [1, 1],
    _b_ = [1, 0];
   function read$0(counter, lexbuf){
    var _c_ = 0;
    if(counter >= 50)
     return caml_trampoline_return(ocaml_lex_read_rec$0, [0, lexbuf, _c_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_read_rec$0(counter$0, lexbuf, _c_);
   }
   function ocaml_lex_read_rec$0(counter, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(25 >= ocaml_lex_state$1 >>> 0)
      switch(ocaml_lex_state$1){
        case 0:
         if(counter >= 50) return caml_trampoline_return(read$0, [0, lexbuf]);
         var counter$0 = counter + 1 | 0;
         return read$0(counter$0, lexbuf);
        case 1:
         return [2, caml_call1(Stdlib_Lexing[8], lexbuf)];
        case 2:
         return 18;
        case 3:
         return 6;
        case 4:
         return 0;
        case 5:
         return _a_;
        case 6:
         return _b_;
        case 7:
         return 2;
        case 8:
         return 20;
        case 9:
         return 3;
        case 10:
         return 8;
        case 11:
         return 9;
        case 12:
         return [0,
                 runtime.caml_int_of_string
                  (caml_call1(Stdlib_Lexing[8], lexbuf))];
        case 13:
         return 16;
        case 14:
         return 1;
        case 15:
         return 7;
        case 16:
         return 10;
        case 17:
         return 17;
        case 18:
         return 19;
        case 19:
         return 15;
        case 20:
         return 13;
        case 21:
         return 14;
        case 22:
         return 11;
        case 23:
         return 5;
        case 24:
         return 4;
        default: return 12;
      }
     caml_call1(lexbuf[1], lexbuf);
     var ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function read(lexbuf){return caml_trampoline(read$0(0, lexbuf));}
   function ocaml_lex_read_rec(lexbuf, ocaml_lex_state){
    return caml_trampoline(ocaml_lex_read_rec$0(0, lexbuf, ocaml_lex_state));
   }
   var Line_Lexer = [0, ocaml_lex_tables, read, ocaml_lex_read_rec];
   runtime.caml_register_global(4, Line_Lexer, "Line__Lexer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Line__Main
//# unitInfo: Requires: Line__Lexer, Line__Parser, Stdlib, Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Line_Lexer = global_data.Line__Lexer,
    Line_Parser = global_data.Line__Parser,
    Stdlib = global_data.Stdlib,
    cst_Empty_input = "Empty input";
   function eval$0(atom){
    var _b_ = atom[1];
    if(737456202 > _b_){
     if(726615281 <= _b_) return atom;
     var exp = atom[2];
     if(typeof exp !== "number" && 737456202 === exp[1]){var a = exp[2]; return [0, 737456202, 1 - a];}
     var exp$0 = eval$0(exp);
     if(typeof exp$0 !== "number" && 737456202 === exp$0[1]){var a$2 = exp$0[2]; return [0, 737456202, 1 - a$2];}
     return [0, 3903731, exp$0];
    }
    if(748545548 > _b_) return atom;
    var
     match = atom[2],
     exp2 = match[3],
     exp1 = match[2],
     binop = match[1],
     exp2$0 = eval$0(exp2),
     exp1$0 = eval$0(exp1);
    if
     (typeof exp1$0 !== "number"
      &&
       737456202 === exp1$0[1]
       && typeof exp2$0 !== "number" && 737456202 === exp2$0[1]){
     var b = exp2$0[2], a$0 = exp1$0[2];
     if(3653065 <= binop){
      if(814983936 > binop) return [0, 737456202, a$0 === b ? 1 : 0];
      var _c_ = 1 - a$0, _d_ = _c_ || b;
      return [0, 737456202, _d_];
     }
     if(3257015 <= binop){
      var b$0 = a$0 ? b : a$0;
      return [0, 737456202, b$0];
     }
     var a$1 = a$0 || b;
     return [0, 737456202, a$1];
    }
    return [0, 748545548, [0, binop, exp1$0, exp2$0]];
   }
   function interp(s){
    var
     lexbuf = caml_call2(Stdlib_Lexing[3], 0, s),
     match = caml_call2(Line_Parser[2], Line_Lexer[2], lexbuf);
    if(match)
     var e = match[1], line = e;
    else
     var line = caml_call1(Stdlib[2], cst_Empty_input);
    var _a_ = line[2];
    return [0, eval$0(line[1]), _a_];
   }
   var Line_Main = [0, interp];
   runtime.caml_register_global(5, Line_Main, "Line__Main");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Line
//# unitInfo: Requires: Line__Ast, Line__Main
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Line_Ast = global_data.Line__Ast,
    Line_Main = global_data.Line__Main,
    pp_rule = Line_Ast[1],
    show_rule = Line_Ast[2],
    pp_conn = Line_Ast[3],
    show_conn = Line_Ast[4],
    pp_prop = Line_Ast[5],
    show_prop = Line_Ast[6],
    pp_line = Line_Ast[7],
    show_line = Line_Ast[8],
    interp = Line_Main[1],
    Line =
      [0,
       pp_rule,
       show_rule,
       pp_conn,
       show_conn,
       pp_prop,
       show_prop,
       pp_line,
       show_line,
       interp];
   runtime.caml_register_global(2, Line, "Line");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
