// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.5.2

//# unitInfo: Provides: Interp
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Interp = [0];
   runtime.caml_register_global(0, Interp, "Interp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Ast
//# unitInfo: Requires: Stdlib, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "\xe2\x8a\xac",
    cst_a = "%a",
    cst$6 = "))",
    cst$5 = ",@ ",
    cst_2 = "<2>",
    cst_fun$1 = "<fun>",
    cst_hov = "<hov>",
    cst$2 = "@ ",
    cst$4 = "@,",
    cst$7 = "@,))@]",
    cst$3 = "@])",
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    cst_Impl = "`Impl",
    cst_Iff = "`Iff",
    cst_And = "`And",
    cst_Or = "`Or",
    _a_ = [0, [15, 0], cst_a],
    cst_Precondition_violated = "Precondition violated",
    _G_ = [0, 737456202, 0],
    _F_ = [0, 737456202, 1],
    _E_ = [0, [15, 0], cst_a],
    cst_fun$0 = cst_fun$1,
    cst_fun = cst_fun$1,
    _q_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Premise", [17, [0, cst$2, 1, 0], 0]]]],
       "(@[<2>Ast.Premise@ "],
    _r_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _s_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.EquivalenceRule (", [17, [0, cst$4, 0, 0], 0]]]],
       "(@[<2>Ast.EquivalenceRule (@,"],
    _t_ = [0, [12, 44, [17, [0, cst$2, 1, 0], 0]], cst$5],
    _u_ = [0, [12, 44, [17, [0, cst$2, 1, 0], 0]], cst$5],
    _v_ = [0, [17, [0, cst$4, 0, 0], [11, cst$6, [17, 0, 0]]], cst$7],
    _w_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.ImplicationRule (", [17, [0, cst$4, 0, 0], 0]]]],
       "(@[<2>Ast.ImplicationRule (@,"],
    _x_ = [0, [12, 44, [17, [0, cst$2, 1, 0], 0]], cst$5],
    _y_ = [0, [12, 44, [17, [0, cst$2, 1, 0], 0]], cst$5],
    _z_ = [0, [12, 44, [17, [0, cst$2, 1, 0], 0]], cst$5],
    _A_ = [0, [17, [0, cst$4, 0, 0], [11, cst$6, [17, 0, 0]]], cst$7],
    _B_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "Ast.Lineref", [17, [0, cst$2, 1, 0], 0]]]],
       "(@[<2>Ast.Lineref@ "],
    _C_ = [0, [4, 0, 0, 0, 0], "%d"],
    _D_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _p_ = [0, [15, 0], cst_a],
    _c_ = [0, [12, 40, [18, [1, [0, 0, ""]], 0]], "(@["],
    _d_ = [0, [12, 44, [17, [0, cst$2, 1, 0], 0]], cst$5],
    _e_ = [0, [12, 44, [17, [0, cst$2, 1, 0], 0]], cst$5],
    _f_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _b_ =
      [0,
       [11, "`Conn (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Conn (@[<hov>"],
    _g_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _h_ =
      [0,
       [11, "`Bool (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Bool (@[<hov>"],
    _i_ = [0, [9, 0, 0], "%B"],
    _j_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _k_ =
      [0,
       [11, "`Atom (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Atom (@[<hov>"],
    _l_ = [0, [3, 0, 0], "%S"],
    _m_ = [0, [17, 0, [12, 41, 0]], cst$3],
    _n_ =
      [0,
       [11, "`Not (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Not (@[<hov>"],
    _o_ = [0, [17, 0, [12, 41, 0]], cst$3],
    cst_Interp_Ast_Rules_Invalid = "Interp.Ast.Rules.Invalid";
   function pp_conn(fmt, param){
    return 3653065 <= param
            ? 814983936
              <= param
              ? caml_call2(Stdlib_Format[13], fmt, cst_Impl)
              : caml_call2(Stdlib_Format[13], fmt, cst_Iff)
            : 3257015
              <= param
              ? caml_call2(Stdlib_Format[13], fmt, cst_And)
              : caml_call2(Stdlib_Format[13], fmt, cst_Or);
   }
   function show_conn(x){
    return caml_call3(Stdlib_Format[141], _a_, pp_conn, x);
   }
   var
    pp_prop = function _c3_(_c1_, _c2_){return _c3_.fun(_c1_, _c2_);},
    show_prop = function _c0_(_cZ_){return _c0_.fun(_cZ_);};
   caml_update_dummy
    (pp_prop,
     function(fmt, param){
      var _cY_ = param[1];
      if(737456202 <= _cY_){
       if(748545548 <= _cY_){
        var x = param[2];
        caml_call2(Stdlib_Format[137], fmt, _b_);
        var a2 = x[3], a1 = x[2], a0 = x[1];
        caml_call2(Stdlib_Format[137], fmt, _c_);
        pp_conn(fmt, a0);
        caml_call2(Stdlib_Format[137], fmt, _d_);
        caml_call1(caml_call1(pp_prop, fmt), a1);
        caml_call2(Stdlib_Format[137], fmt, _e_);
        caml_call1(caml_call1(pp_prop, fmt), a2);
        caml_call2(Stdlib_Format[137], fmt, _f_);
        return caml_call2(Stdlib_Format[137], fmt, _g_);
       }
       var x$0 = param[2];
       caml_call2(Stdlib_Format[137], fmt, _h_);
       caml_call1(caml_call2(Stdlib_Format[137], fmt, _i_), x$0);
       return caml_call2(Stdlib_Format[137], fmt, _j_);
      }
      if(726615281 <= _cY_){
       var x$1 = param[2];
       caml_call2(Stdlib_Format[137], fmt, _k_);
       caml_call1(caml_call2(Stdlib_Format[137], fmt, _l_), x$1);
       return caml_call2(Stdlib_Format[137], fmt, _m_);
      }
      var x$2 = param[2];
      caml_call2(Stdlib_Format[137], fmt, _n_);
      caml_call1(caml_call1(pp_prop, fmt), x$2);
      return caml_call2(Stdlib_Format[137], fmt, _o_);
     });
   caml_update_dummy
    (show_prop,
     function(x){return caml_call3(Stdlib_Format[141], _p_, pp_prop, x);});
   var
    pp = function _cX_(_cV_, _cW_){return _cX_.fun(_cV_, _cW_);},
    show = function _cU_(_cT_){return _cU_.fun(_cT_);};
   caml_update_dummy
    (pp,
     function(fmt, param){
      switch(param[0]){
        case 0:
         var a0 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _q_);
         caml_call1(caml_call1(pp_prop, fmt), a0);
         return caml_call2(Stdlib_Format[137], fmt, _r_);
        case 1:
         var a2 = param[3], a1 = param[2];
         caml_call2(Stdlib_Format[137], fmt, _s_);
         caml_call2(Stdlib_Format[13], fmt, cst_fun);
         caml_call2(Stdlib_Format[137], fmt, _t_);
         caml_call1(caml_call1(pp, fmt), a1);
         caml_call2(Stdlib_Format[137], fmt, _u_);
         caml_call1(caml_call1(pp_prop, fmt), a2);
         return caml_call2(Stdlib_Format[137], fmt, _v_);
        case 2:
         var a3 = param[4], a2$0 = param[3], a1$0 = param[2];
         caml_call2(Stdlib_Format[137], fmt, _w_);
         caml_call2(Stdlib_Format[13], fmt, cst_fun$0);
         caml_call2(Stdlib_Format[137], fmt, _x_);
         caml_call1(caml_call1(pp, fmt), a1$0);
         caml_call2(Stdlib_Format[137], fmt, _y_);
         caml_call1(caml_call1(pp, fmt), a2$0);
         caml_call2(Stdlib_Format[137], fmt, _z_);
         caml_call1(caml_call1(pp_prop, fmt), a3);
         return caml_call2(Stdlib_Format[137], fmt, _A_);
        default:
         var a0$0 = param[1];
         caml_call2(Stdlib_Format[137], fmt, _B_);
         caml_call1(caml_call2(Stdlib_Format[137], fmt, _C_), a0$0);
         return caml_call2(Stdlib_Format[137], fmt, _D_);
      }
     });
   caml_update_dummy
    (show, function(x){return caml_call3(Stdlib_Format[141], _E_, pp, x);});
   var
    Invalid = [248, cst_Interp_Ast_Rules_Invalid, runtime.caml_fresh_oo_id(0)];
   function not_equivalent(p, q){
    var
     _cQ_ = caml_call1(show_prop, q),
     _cR_ = caml_call2(Stdlib[28], cst, _cQ_),
     _cS_ = caml_call1(show_prop, p);
    return [0, Invalid, caml_call2(Stdlib[28], _cS_, _cR_)];
   }
   function is_equivalent(pattern, p, q){
    if(check(pattern, p, q)) return q;
    throw caml_maybe_attach_backtrace(not_equivalent(p, q), 1);
   }
   function check(pattern, p, q){
    var p$0 = p, q$0 = q;
    for(;;){
     var _cI_ = caml_call2(pattern, p$0, q$0);
     if(_cI_)
      var _cJ_ = _cI_;
     else{
      if(typeof p$0 !== "number"){
       var _cK_ = p$0[1];
       if(3903731 === _cK_){
        if(typeof q$0 !== "number" && 3903731 === q$0[1]){
         var q$1 = q$0[2], p$1 = p$0[2], p$0 = p$1, q$0 = q$1;
         continue;
        }
       }
       else if
        (748545548 === _cK_ && typeof q$0 !== "number" && 748545548 === q$0[1]){
        var
         _cL_ = q$0[2],
         q2 = _cL_[3],
         p2 = _cL_[2],
         conn2 = _cL_[1],
         match = p$0[2],
         q1 = match[3],
         p1 = match[2],
         conn1 = match[1];
        if(conn1 === conn2){
         var
          _cM_ = check(pattern, p1, p2),
          _cN_ = _cM_ || check(pattern, q1, q2);
         if(_cN_)
          var _cO_ = caml_equal(p1, p2), _cP_ = _cO_ || caml_equal(q1, q2);
         else
          var _cP_ = _cN_;
         return _cP_;
        }
       }
      }
      var _cJ_ = 0;
     }
     return _cJ_;
    }
   }
   function le(p, q){
    a:
    if(typeof p !== "number" && 748545548 === p[1]){
     var _ce_ = p[2], _cf_ = _ce_[1];
     if(typeof _cf_ === "number"){
      b:
      {
       if(3257016 <= _cf_){
        if(3653065 !== _cf_){
         if(814983936 !== _cf_) break a;
         if(typeof q === "number") break a;
         if(748545548 !== q[1]) break a;
         var _cs_ = q[2], _ct_ = _cs_[1];
         if(typeof _ct_ !== "number") break a;
         if(17731 !== _ct_) break a;
         var _cu_ = _cs_[2];
         if(typeof _cu_ === "number") break a;
         if(3903731 !== _cu_[1]) break a;
         var q2$0 = _cs_[3], p2$0 = _cu_[2], q1$0 = _ce_[3], p1$0 = _ce_[2];
         break b;
        }
        if(typeof q === "number") break a;
        if(748545548 !== q[1]) break a;
        var _cg_ = q[2], _ch_ = _cg_[1];
        if(typeof _ch_ !== "number") break a;
        if(3257015 !== _ch_) break a;
        var _ci_ = _cg_[2];
        if(typeof _ci_ === "number") break a;
        if(748545548 !== _ci_[1]) break a;
        var _cj_ = _ci_[2], _ck_ = _cj_[1];
        if(typeof _ck_ !== "number") break a;
        if(814983936 !== _ck_) break a;
        var _cl_ = _cg_[3];
        if(typeof _cl_ === "number") break a;
        if(748545548 !== _cl_[1]) break a;
        var _cm_ = _cl_[2], _cn_ = _cm_[1];
        if(typeof _cn_ !== "number") break a;
        if(814983936 !== _cn_) break a;
        var
         p3 = _cm_[3],
         q3 = _cm_[2],
         q2 = _cj_[3],
         p2 = _cj_[2],
         q1 = _ce_[3],
         p1 = _ce_[2];
       }
       else{
        if(17731 === _cf_){
         var _cx_ = _ce_[2];
         if(typeof _cx_ === "number") break a;
         if(3903731 !== _cx_[1]) break a;
         if(typeof q === "number") break a;
         if(748545548 !== q[1]) break a;
         var _cy_ = q[2], _cz_ = _cy_[1];
         if(typeof _cz_ !== "number") break a;
         if(814983936 !== _cz_) break a;
         var q2$0 = _ce_[3], p2$0 = _cx_[2], q1$0 = _cy_[3], p1$0 = _cy_[2];
         break b;
        }
        if(3257015 > _cf_) break a;
        var _cA_ = _ce_[2];
        if(typeof _cA_ === "number") break a;
        if(748545548 !== _cA_[1]) break a;
        var _cB_ = _cA_[2], _cC_ = _cB_[1];
        if(typeof _cC_ !== "number") break a;
        if(814983936 !== _cC_) break a;
        var _cD_ = _ce_[3];
        if(typeof _cD_ === "number") break a;
        if(748545548 !== _cD_[1]) break a;
        var _cE_ = _cD_[2], _cF_ = _cE_[1];
        if(typeof _cF_ !== "number") break a;
        if(814983936 !== _cF_) break a;
        if(typeof q === "number") break a;
        if(748545548 !== q[1]) break a;
        var _cG_ = q[2], _cH_ = _cG_[1];
        if(typeof _cH_ !== "number") break a;
        if(3653065 !== _cH_) break a;
        var
         p3 = _cE_[3],
         q3 = _cE_[2],
         q2 = _cB_[3],
         p2 = _cB_[2],
         q1 = _cG_[3],
         p1 = _cG_[2];
       }
       var _co_ = caml_equal(p1, p2);
       if(_co_){
        var _cp_ = caml_equal(p2, p3);
        if(_cp_)
         var
          _cq_ = caml_equal(q1, q2),
          _cr_ = _cq_ ? caml_equal(q2, q3) : _cq_;
        else
         var _cr_ = _cp_;
       }
       else
        var _cr_ = _co_;
       return _cr_;
      }
      var
       _cv_ = caml_equal(p1$0, p2$0),
       _cw_ = _cv_ ? caml_equal(q1$0, q2$0) : _cv_;
      return _cw_;
     }
    }
    return 0;
   }
   function idempotence(p, q){
    a:
    if(typeof p !== "number" && 748545548 === p[1]){
     var _cc_ = p[2], _cd_ = _cc_[1];
     if(typeof _cd_ === "number"){
      if(17731 !== _cd_ && 3257015 !== _cd_) break a;
      var p2$0 = _cc_[3], p1$0 = _cc_[2];
      if(caml_equal(p1$0, p2$0)) return caml_equal(p1$0, q);
     }
    }
    a:
    if(typeof q !== "number" && 748545548 === q[1]){
     var _ca_ = q[2], _cb_ = _ca_[1];
     if(typeof _cb_ === "number"){
      if(17731 !== _cb_ && 3257015 !== _cb_) break a;
      var p2 = _ca_[3], p1 = _ca_[2];
      if(caml_equal(p1, p2)) return caml_equal(p1, p);
     }
    }
    return 0;
   }
   function commutative(p, q){
    a:
    if(typeof p !== "number" && 748545548 === p[1]){
     var _b8_ = p[2], conn1 = _b8_[1];
     if(typeof conn1 === "number"){
      if(17731 !== conn1 && 3257015 !== conn1 && 3653065 !== conn1) break a;
      if(typeof q !== "number" && 748545548 === q[1]){
       var match = q[2], conn2 = match[1], q1 = _b8_[3], p1 = _b8_[2];
       if(typeof conn2 === "number"){
        if(17731 !== conn2 && 3257015 !== conn2 && 3653065 !== conn2) break a;
        var p2 = match[3], q2 = match[2], _b9_ = caml_equal(conn1, conn2);
        if(_b9_)
         var
          _b__ = caml_equal(p1, p2),
          _b$_ = _b__ ? caml_equal(q1, q2) : _b__;
        else
         var _b$_ = _b9_;
        return _b$_;
       }
      }
     }
    }
    return 0;
   }
   function associative(p, q){
    if(typeof p !== "number" && 748545548 === p[1]){
     var _bK_ = p[2], _bL_ = _bK_[1];
     if(typeof _bL_ === "number")
      if(17731 === _bL_){
       var _bM_ = _bK_[2];
       if(typeof _bM_ !== "number" && 748545548 === _bM_[1]){
        var _bN_ = _bM_[2], _bO_ = _bN_[1];
        if
         (typeof _bO_ === "number"
          && 17731 === _bO_ && typeof q !== "number" && 748545548 === q[1]){
         var _bP_ = q[2], _bQ_ = _bP_[1];
         if(typeof _bQ_ === "number" && 17731 === _bQ_){
          var _bR_ = _bP_[3];
          if(typeof _bR_ !== "number" && 748545548 === _bR_[1]){
           var _bS_ = _bR_[2], _bT_ = _bS_[1];
           if(typeof _bT_ === "number" && 17731 === _bT_){
            var
             r2 = _bS_[3],
             q2 = _bS_[2],
             p2 = _bP_[2],
             r1 = _bK_[3],
             q1 = _bN_[3],
             p1 = _bN_[2],
             _bU_ = caml_equal(p1, p2);
            if(_bU_)
             var
              _bV_ = caml_equal(q1, q2),
              _bW_ = _bV_ ? caml_equal(r1, r2) : _bV_;
            else
             var _bW_ = _bU_;
            return _bW_;
           }
          }
         }
        }
       }
      }
      else if(3257015 === _bL_){
       var _bX_ = _bK_[2];
       if(typeof _bX_ !== "number" && 748545548 === _bX_[1]){
        var _bY_ = _bX_[2], _bZ_ = _bY_[1];
        if
         (typeof _bZ_ === "number"
          && 3257015 === _bZ_ && typeof q !== "number" && 748545548 === q[1]){
         var _b0_ = q[2], _b1_ = _b0_[1];
         if(typeof _b1_ === "number" && 3257015 === _b1_){
          var _b2_ = _b0_[3];
          if(typeof _b2_ !== "number" && 748545548 === _b2_[1]){
           var _b3_ = _b2_[2], _b4_ = _b3_[1];
           if(typeof _b4_ === "number" && 3257015 === _b4_){
            var
             r2$0 = _b3_[3],
             q2$0 = _b3_[2],
             p2$0 = _b0_[2],
             r1$0 = _bK_[3],
             q1$0 = _bY_[3],
             p1$0 = _bY_[2],
             _b5_ = caml_equal(p1$0, p2$0);
            if(_b5_)
             var
              _b6_ = caml_equal(q1$0, q2$0),
              _b7_ = _b6_ ? caml_equal(r1$0, r2$0) : _b6_;
            else
             var _b7_ = _b5_;
            return _b7_;
           }
          }
         }
        }
       }
      }
    }
    return 0;
   }
   function distributive(p, q){
    a:
    if(typeof p !== "number" && 748545548 === p[1]){
     var _aU_ = p[2], _aV_ = _aU_[1];
     if(typeof _aV_ === "number"){
      b:
      {
       c:
       {
        if(17731 === _aV_){
         var _aW_ = _aU_[2], _aX_ = _aU_[3];
         if(typeof _aX_ !== "number" && 748545548 === _aX_[1]){
          var _ba_ = _aX_[2], _bb_ = _ba_[1];
          if
           (typeof _bb_ === "number"
            && 3257015 === _bb_ && typeof q !== "number" && 748545548 === q[1]){
           var _bc_ = q[2], _bd_ = _bc_[1];
           if(typeof _bd_ === "number" && 3257015 === _bd_){
            var _be_ = _bc_[2];
            if(typeof _be_ !== "number" && 748545548 === _be_[1]){
             var _bf_ = _be_[2], _bg_ = _bf_[1];
             if(typeof _bg_ === "number" && 17731 === _bg_){
              var _bh_ = _bc_[3];
              if(typeof _bh_ !== "number" && 748545548 === _bh_[1]){
               var _bi_ = _bh_[2], _bj_ = _bi_[1];
               if(typeof _bj_ === "number" && 17731 === _bj_){
                var
                 r2$0 = _bi_[3],
                 p3$0 = _bi_[2],
                 q2$0 = _bf_[3],
                 p2$0 = _bf_[2],
                 r1$0 = _ba_[3],
                 q1$0 = _ba_[2],
                 p1$0 = _aW_;
                break c;
               }
              }
             }
            }
           }
          }
         }
         if(typeof _aW_ === "number") break a;
         if(748545548 !== _aW_[1]) break a;
         var _aY_ = _aW_[2], _aZ_ = _aY_[1];
         if(typeof _aZ_ !== "number") break a;
         if(3257015 !== _aZ_) break a;
         var _a0_ = _aU_[3];
         if(typeof _a0_ === "number") break a;
         if(748545548 !== _a0_[1]) break a;
         var _a1_ = _a0_[2], _a2_ = _a1_[1];
         if(typeof _a2_ !== "number") break a;
         if(3257015 !== _a2_) break a;
         if(typeof q === "number") break a;
         if(748545548 !== q[1]) break a;
         var _a3_ = q[2], _a4_ = _a3_[1];
         if(typeof _a4_ !== "number") break a;
         if(3257015 !== _a4_) break a;
         var _a5_ = _a3_[3];
         if(typeof _a5_ === "number") break a;
         if(748545548 !== _a5_[1]) break a;
         var _a6_ = _a5_[2], _a7_ = _a6_[1];
         if(typeof _a7_ !== "number") break a;
         if(17731 !== _a7_) break a;
         var
          r2 = _a1_[3],
          p3 = _a1_[2],
          q2 = _aY_[3],
          p2 = _aY_[2],
          r1 = _a6_[3],
          q1 = _a6_[2],
          p1 = _a3_[2];
         break b;
        }
        if(3257015 !== _aV_) break a;
        var _bo_ = _aU_[2];
        if(typeof _bo_ !== "number" && 748545548 === _bo_[1]){
         var _bA_ = _bo_[2], _bB_ = _bA_[1];
         if(typeof _bB_ === "number" && 17731 === _bB_){
          var _bC_ = _aU_[3];
          if(typeof _bC_ !== "number" && 748545548 === _bC_[1]){
           var _bD_ = _bC_[2], _bE_ = _bD_[1];
           if
            (typeof _bE_ === "number"
             && 17731 === _bE_ && typeof q !== "number" && 748545548 === q[1]){
            var _bF_ = q[2], _bG_ = _bF_[1];
            if(typeof _bG_ === "number" && 17731 === _bG_){
             var _bH_ = _bF_[3];
             if(typeof _bH_ !== "number" && 748545548 === _bH_[1]){
              var _bI_ = _bH_[2], _bJ_ = _bI_[1];
              if(typeof _bJ_ === "number" && 3257015 === _bJ_){
               var
                r2$0 = _bD_[3],
                p3$0 = _bD_[2],
                q2$0 = _bA_[3],
                p2$0 = _bA_[2],
                r1$0 = _bI_[3],
                q1$0 = _bI_[2],
                p1$0 = _bF_[2];
               break c;
              }
             }
            }
           }
          }
         }
        }
        var _bp_ = _aU_[3];
        if(typeof _bp_ === "number") break a;
        if(748545548 !== _bp_[1]) break a;
        var _bq_ = _bp_[2], _br_ = _bq_[1];
        if(typeof _br_ !== "number") break a;
        if(17731 !== _br_) break a;
        if(typeof q === "number") break a;
        if(748545548 !== q[1]) break a;
        var _bs_ = q[2], _bt_ = _bs_[1];
        if(typeof _bt_ !== "number") break a;
        if(17731 !== _bt_) break a;
        var _bu_ = _bs_[2];
        if(typeof _bu_ === "number") break a;
        if(748545548 !== _bu_[1]) break a;
        var _bv_ = _bu_[2], _bw_ = _bv_[1];
        if(typeof _bw_ !== "number") break a;
        if(3257015 !== _bw_) break a;
        var _bx_ = _bs_[3];
        if(typeof _bx_ === "number") break a;
        if(748545548 !== _bx_[1]) break a;
        var _by_ = _bx_[2], _bz_ = _by_[1];
        if(typeof _bz_ !== "number") break a;
        if(3257015 !== _bz_) break a;
        var
         r2 = _by_[3],
         p3 = _by_[2],
         q2 = _bv_[3],
         p2 = _bv_[2],
         r1 = _bq_[3],
         q1 = _bq_[2],
         p1 = _bo_;
        break b;
       }
       var _bk_ = caml_equal(p1$0, p2$0);
       if(_bk_){
        var _bl_ = caml_equal(p2$0, p3$0);
        if(_bl_)
         var
          _bm_ = caml_equal(q1$0, q2$0),
          _bn_ = _bm_ ? caml_equal(r1$0, r2$0) : _bm_;
        else
         var _bn_ = _bl_;
       }
       else
        var _bn_ = _bk_;
       return _bn_;
      }
      var _a8_ = caml_equal(p1, p2);
      if(_a8_){
       var _a9_ = caml_equal(p2, p3);
       if(_a9_)
        var
         _a__ = caml_equal(q1, q2),
         _a$_ = _a__ ? caml_equal(r1, r2) : _a__;
       else
        var _a$_ = _a9_;
      }
      else
       var _a$_ = _a8_;
      return _a$_;
     }
    }
    return 0;
   }
   function doublenegation(p, q){
    if(typeof p !== "number" && 3903731 === p[1]){
     var match$0 = p[2];
     if(typeof match$0 !== "number" && 3903731 === match$0[1]){var p1 = match$0[2]; return caml_equal(p1, q);}
    }
    if(typeof q !== "number" && 3903731 === q[1]){
     var match = q[2];
     if(typeof match !== "number" && 3903731 === match[1]){var p2 = match[2]; return caml_equal(p, p2);}
    }
    return 0;
   }
   function demorgans(p, q){
    a:
    if(typeof p !== "number"){
     var _ay_ = p[1];
     if(3903731 === _ay_){
      var _az_ = p[2];
      if(typeof _az_ === "number") break a;
      if(748545548 !== _az_[1]) break a;
      var _aA_ = _az_[2], _aB_ = _aA_[1];
      if(typeof _aB_ !== "number") break a;
      if(17731 !== _aB_ && 3257015 !== _aB_) break a;
      if(typeof q === "number") break a;
      if(748545548 !== q[1]) break a;
      var _aC_ = q[2], _aD_ = _aC_[1], _aE_ = _aA_[3], _aF_ = _aA_[2];
      if(typeof _aD_ !== "number") break a;
      if(17731 !== _aD_ && 3257015 !== _aD_) break a;
      var _aG_ = _aC_[2];
      if(typeof _aG_ === "number") break a;
      if(3903731 !== _aG_[1]) break a;
      var _aH_ = _aC_[3];
      if(typeof _aH_ === "number") break a;
      if(3903731 !== _aH_[1]) break a;
      var
       q2 = _aH_[2],
       p2 = _aG_[2],
       conn2 = _aD_,
       q1 = _aE_,
       p1 = _aF_,
       conn1 = _aB_;
     }
     else{
      if(748545548 !== _ay_) break a;
      var _aL_ = p[2], _aM_ = _aL_[1];
      if(typeof _aM_ !== "number") break a;
      if(17731 !== _aM_ && 3257015 !== _aM_) break a;
      var _aN_ = _aL_[2];
      if(typeof _aN_ === "number") break a;
      if(3903731 !== _aN_[1]) break a;
      var _aO_ = _aL_[3];
      if(typeof _aO_ === "number") break a;
      if(3903731 !== _aO_[1]) break a;
      if(typeof q === "number") break a;
      if(3903731 !== q[1]) break a;
      var _aP_ = q[2];
      if(typeof _aP_ === "number") break a;
      if(748545548 !== _aP_[1]) break a;
      var _aQ_ = _aP_[2], _aR_ = _aQ_[1], _aS_ = _aO_[2], _aT_ = _aN_[2];
      if(typeof _aR_ !== "number") break a;
      if(17731 !== _aR_ && 3257015 !== _aR_) break a;
      var
       q2 = _aQ_[3],
       p2 = _aQ_[2],
       conn2 = _aR_,
       q1 = _aS_,
       p1 = _aT_,
       conn1 = _aM_;
     }
     var _aI_ = runtime.caml_notequal(conn1, conn2);
     if(_aI_)
      var _aJ_ = caml_equal(p1, p2), _aK_ = _aJ_ ? caml_equal(q1, q2) : _aJ_;
     else
      var _aK_ = _aI_;
     return _aK_;
    }
    return 0;
   }
   function identity(p, q){
    a:
    {
     b:
     if(typeof p !== "number" && 748545548 === p[1]){
      var _ar_ = p[2], _as_ = _ar_[1];
      if(typeof _as_ === "number"){
       if(17731 === _as_){
        var _at_ = _ar_[2];
        c:
        {
         if(typeof _at_ !== "number" && 737456202 === _at_[1] && ! _at_[2]){var p1$0 = _ar_[3]; break c;}
         var _au_ = _ar_[3];
         if(typeof _au_ === "number") break b;
         if(737456202 !== _au_[1]) break b;
         if(_au_[2]) break b;
         var p1$0 = _at_;
        }
        var p2 = q, p1 = p1$0;
        break a;
       }
       if(3257015 === _as_){
        var _av_ = _ar_[2];
        c:
        {
         if(typeof _av_ !== "number" && 737456202 === _av_[1] && _av_[2]){var _ax_ = _ar_[3]; break c;}
         var _aw_ = _ar_[3];
         if(typeof _aw_ === "number") break b;
         if(737456202 !== _aw_[1]) break b;
         if(! _aw_[2]) break b;
         var _ax_ = _av_;
        }
        var p2 = q, p1 = _ax_;
        break a;
       }
      }
     }
     b:
     if(typeof q !== "number" && 748545548 === q[1]){
      var _aj_ = q[2], _ak_ = _aj_[1];
      if(typeof _ak_ === "number"){
       if(17731 === _ak_){
        var _al_ = _aj_[2];
        c:
        {
         if(typeof _al_ !== "number" && 737456202 === _al_[1] && ! _al_[2]){var _an_ = _aj_[3]; break c;}
         var _am_ = _aj_[3];
         if(typeof _am_ === "number") break b;
         if(737456202 !== _am_[1]) break b;
         if(_am_[2]) break b;
         var _an_ = _al_;
        }
        var p2 = _an_, p1 = p;
        break a;
       }
       if(3257015 === _ak_){
        var _ao_ = _aj_[2];
        c:
        {
         if(typeof _ao_ !== "number" && 737456202 === _ao_[1] && _ao_[2]){var _aq_ = _aj_[3]; break c;}
         var _ap_ = _aj_[3];
         if(typeof _ap_ === "number") break b;
         if(737456202 !== _ap_[1]) break b;
         if(! _ap_[2]) break b;
         var _aq_ = _ao_;
        }
        var p2 = _aq_, p1 = p;
        break a;
       }
      }
     }
     return 0;
    }
    return caml_equal(p1, p2);
   }
   function dominance(p, q){
    a:
    {
     b:
     if(typeof p !== "number" && 748545548 === p[1]){
      var _af_ = p[2], _ag_ = _af_[1];
      if(typeof _ag_ === "number" && 3257015 === _ag_){
       var _ah_ = _af_[2];
       c:
       {
        if(typeof _ah_ !== "number" && 737456202 === _ah_[1] && ! _ah_[2])
         break c;
        var _ai_ = _af_[3];
        if(typeof _ai_ === "number" || 737456202 !== _ai_[1] || _ai_[2])
         break b;
       }
       var q$1 = q;
       break a;
      }
     }
     b:
     if(typeof q !== "number" && 748545548 === q[1]){
      var _ab_ = q[2], _ac_ = _ab_[1];
      if(typeof _ac_ === "number" && 3257015 === _ac_){
       var _ad_ = _ab_[2];
       c:
       {
        if(typeof _ad_ !== "number" && 737456202 === _ad_[1] && ! _ad_[2])
         break c;
        var _ae_ = _ab_[3];
        if(typeof _ae_ === "number" || 737456202 !== _ae_[1] || _ae_[2])
         break b;
       }
       var q$1 = p;
       break a;
      }
     }
     b:
     {
      c:
      if(typeof p !== "number" && 748545548 === p[1]){
       var _Z_ = p[2], ___ = _Z_[1];
       if(typeof ___ === "number" && 17731 === ___){
        var _$_ = _Z_[2];
        d:
        {
         if(typeof _$_ !== "number" && 737456202 === _$_[1] && _$_[2])
          break d;
         var _aa_ = _Z_[3];
         if(typeof _aa_ === "number" || 737456202 !== _aa_[1] || ! _aa_[2])
          break c;
        }
        var q$0 = q;
        break b;
       }
      }
      c:
      if(typeof q !== "number" && 748545548 === q[1]){
       var _V_ = q[2], _W_ = _V_[1];
       if(typeof _W_ === "number" && 17731 === _W_){
        var _X_ = _V_[2];
        d:
        {
         if(typeof _X_ !== "number" && 737456202 === _X_[1] && _X_[2])
          break d;
         var _Y_ = _V_[3];
         if(typeof _Y_ === "number" || 737456202 !== _Y_[1] || ! _Y_[2])
          break c;
        }
        var q$0 = p;
        break b;
       }
      }
      return 0;
     }
     return caml_equal(_F_, q$0);
    }
    return caml_equal(_G_, q$1);
   }
   function not_implied(p1, p2, q){
    var
     _Q_ = caml_call1(show_prop, q),
     _R_ = caml_call2(Stdlib[28], cst$0, _Q_),
     _S_ = caml_call1(show_prop, p2),
     _T_ = caml_call2(Stdlib[28], _S_, _R_),
     _U_ = caml_call1(show_prop, p1);
    return [0, Invalid, caml_call2(Stdlib[28], _U_, _T_)];
   }
   function is_implied(pattern, p1, p2, q){
    if(caml_call3(pattern, p1, p2, q)) return q;
    throw caml_maybe_attach_backtrace(not_implied(p1, p2, q), 1);
   }
   function modusponens(p1, p2, q){
    if(typeof p1 !== "number" && 748545548 === p1[1]){
     var _M_ = p1[2], _N_ = _M_[1];
     if(typeof _N_ === "number" && 814983936 === _N_){
      var
       q1 = _M_[3],
       p1$0 = _M_[2],
       _O_ = caml_equal(p1$0, p2),
       _P_ = _O_ ? caml_equal(q1, q) : _O_;
      return _P_;
     }
    }
    return 0;
   }
   function modustollens(p1, p2, q){
    if(typeof p1 !== "number" && 748545548 === p1[1]){
     var _I_ = p1[2], _J_ = _I_[1];
     if
      (typeof _J_ === "number"
       && 814983936 === _J_ && typeof p2 !== "number" && 3903731 === p2[1]){
      var
       p2$0 = p2[2],
       p1$0 = _I_[3],
       q1 = _I_[2],
       _K_ = caml_equal(p1$0, p2$0),
       _L_ = _K_ ? caml_equal(q1, [0, 3903731, q]) : _K_;
      return _L_;
     }
    }
    return 0;
   }
   var
    Rules =
      [0,
       Invalid,
       not_equivalent,
       is_equivalent,
       check,
       le,
       idempotence,
       commutative,
       associative,
       distributive,
       doublenegation,
       demorgans,
       identity,
       dominance,
       not_implied,
       is_implied,
       modusponens,
       modustollens],
    le$0 = caml_call1(Rules[3], Rules[5]),
    idempotence$0 = caml_call1(Rules[3], Rules[6]),
    commutative$0 = caml_call1(Rules[3], Rules[7]),
    associative$0 = caml_call1(Rules[3], Rules[8]),
    distributive$0 = caml_call1(Rules[3], Rules[9]),
    doublenegation$0 = caml_call1(Rules[3], Rules[10]),
    demorgan = caml_call1(Rules[3], Rules[11]),
    identity$0 = caml_call1(Rules[3], Rules[12]),
    dominance$0 = caml_call1(Rules[3], Rules[13]),
    modusponens$0 = caml_call1(Rules[15], Rules[16]),
    modustollens$0 = caml_call1(Rules[15], Rules[17]);
   function validate(param){
    switch(param[0]){
      case 0:
       var p = param[1]; return p;
      case 1:
       var q = param[3], p$0 = param[2], rule = param[1];
       return caml_call2(rule, validate(p$0), q);
      case 2:
       var
        q$0 = param[4],
        p2 = param[3],
        p1 = param[2],
        rule$0 = param[1],
        _H_ = validate(p2);
       return caml_call3(rule$0, validate(p1), _H_, q$0);
      default: return caml_call1(Stdlib[2], cst_Precondition_violated);
    }
   }
   var
    Interp_Ast =
      [0,
       pp_conn,
       show_conn,
       pp_prop,
       show_prop,
       pp,
       show,
       Rules,
       le$0,
       idempotence$0,
       commutative$0,
       associative$0,
       distributive$0,
       doublenegation$0,
       demorgan,
       identity$0,
       dominance$0,
       modusponens$0,
       modustollens$0,
       validate];
   runtime.caml_register_global(45, Interp_Ast, "Interp__Ast");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Parser
//# unitInfo: Requires: Interp__Ast, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printf = global_data.Stdlib__Printf,
    Assert_failure = global_data.Assert_failure,
    Interp_Ast = global_data.Interp__Ast,
    Error =
      [248, "Interp.Parser.MenhirBasics.Error", runtime.caml_fresh_oo_id(0)],
    _a_ =
      [0,
       [11,
        "Internal failure -- please contact the parser generator's developers.\n",
        [10, 0]],
       "Internal failure -- please contact the parser generator's developers.\n%!"],
    _b_ = [0, "interpreter/parser.ml", 329, 4];
   function eRR(s){throw caml_maybe_attach_backtrace(Error, 1);}
   function menhir_run_16(menhir_stack$1, menhir_s$1){
    var menhir_stack = menhir_stack$1, v = 0, menhir_s = menhir_s$1;
    for(;;){
     if(! menhir_s) return v;
     if(7 > menhir_s){
      caml_call1(Stdlib_Printf[3], _a_);
      throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
     }
     var
      h = menhir_stack[3],
      menhir_s$0 = menhir_stack[2],
      menhir_stack$0 = menhir_stack[1],
      v$0 = [0, h, v],
      menhir_stack = menhir_stack$0,
      v = v$0,
      menhir_s = menhir_s$0;
    }
   }
   function menhir_run_01$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var menhir_stack$0 = menhir_stack, menhir_s$0 = menhir_s;
    for(;;){
     var
      menhir_stack$1 = [0, menhir_stack$0, menhir_s$0],
      tok = caml_call1(menhir_lexer, menhir_lexbuf),
      menhir_s$1 = 1;
     if(typeof tok === "number")
      switch(tok){
        case 3:
         var menhir_stack$0 = menhir_stack$1, menhir_s$0 = menhir_s$1;
         continue;
        case 6:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_02$0,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
         var counter$2 = counter + 1 | 0;
         return menhir_run_02$0
                 (counter$2,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$1);
      }
     else
      switch(tok[0]){
        case 1:
         var v = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_03$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v,
                    menhir_s$1]);
         var counter$1 = counter + 1 | 0;
         return menhir_run_03$0
                 (counter$1,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s$1);
        case 2:
         var v$0 = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_04$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s$1]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_04$0
                 (counter$0,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s$1);
      }
     return eRR(0);
    }
   }
   function menhir_run_02$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var menhir_stack$0 = menhir_stack, menhir_s$0 = menhir_s;
    for(;;){
     var
      menhir_stack$1 = [0, menhir_stack$0, menhir_s$0],
      tok = caml_call1(menhir_lexer, menhir_lexbuf),
      menhir_s$1 = 2;
     if(typeof tok === "number")
      switch(tok){
        case 3:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_01$0,
                   [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, menhir_s$1]);
         var counter$2 = counter + 1 | 0;
         return menhir_run_01$0
                 (counter$2,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  menhir_s$1);
        case 6:
         var menhir_stack$0 = menhir_stack$1, menhir_s$0 = menhir_s$1;
         continue;
      }
     else
      switch(tok[0]){
        case 1:
         var v = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_03$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v,
                    menhir_s$1]);
         var counter$1 = counter + 1 | 0;
         return menhir_run_03$0
                 (counter$1,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s$1);
        case 2:
         var v$0 = tok[1];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_04$0,
                   [0,
                    menhir_stack$1,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s$1]);
         var counter$0 = counter + 1 | 0;
         return menhir_run_04$0
                 (counter$0,
                  menhir_stack$1,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s$1);
      }
     return eRR(0);
    }
   }
   function menhir_run_03$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, b, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, 737456202, b];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_prop,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_prop
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_goto_prop
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v$4, menhir_s, tok){
    var
     menhir_stack$0 = menhir_stack,
     p2 = v$4,
     menhir_s$0 = menhir_s,
     tok$0 = tok;
    for(;;)
     a:
     switch(menhir_s$0){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_17,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   p2,
                   menhir_s$0,
                   tok$0]);
        var counter$11 = counter + 1 | 0;
        return menhir_run_17
                (counter$11,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 p2,
                 menhir_s$0,
                 tok$0);
       case 1:
        var
         menhir_s$1 = menhir_stack$0[2],
         menhir_stack$1 = menhir_stack$0[1],
         v$3 = [0, 3903731, p2],
         menhir_stack$0 = menhir_stack$1,
         p2 = v$3,
         menhir_s$0 = menhir_s$1;
        break;
       case 2:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 0:
            var
             tok$1 = caml_call1(menhir_lexer, menhir_lexbuf),
             menhir_s$6 = menhir_stack$0[2],
             menhir_stack$13 = menhir_stack$0[1],
             menhir_stack$0 = menhir_stack$13,
             menhir_s$0 = menhir_s$6,
             tok$0 = tok$1;
            break a;
           case 2:
            var menhir_stack$14 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$14, menhir_lexbuf, menhir_lexer]);
            var counter$10 = counter + 1 | 0;
            return menhir_run_07
                    (counter$10, menhir_stack$14, menhir_lexbuf, menhir_lexer);
           case 8:
            var menhir_stack$15 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$15, menhir_lexbuf, menhir_lexer]);
            var counter$6 = counter + 1 | 0;
            return menhir_run_09
                    (counter$6, menhir_stack$15, menhir_lexbuf, menhir_lexer);
           case 9:
            var menhir_stack$16 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_13,
                      [0, menhir_stack$16, menhir_lexbuf, menhir_lexer]);
            var counter$3 = counter + 1 | 0;
            return menhir_run_13
                    (counter$3, menhir_stack$16, menhir_lexbuf, menhir_lexer);
           case 19:
            var menhir_stack$17 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_11,
                      [0, menhir_stack$17, menhir_lexbuf, menhir_lexer]);
            var counter$2 = counter + 1 | 0;
            return menhir_run_11
                    (counter$2, menhir_stack$17, menhir_lexbuf, menhir_lexer);
         }
        return eRR(0);
       case 3:
        var
         p1$2 = menhir_stack$0[3],
         menhir_s$5 = menhir_stack$0[2],
         menhir_stack$12 = menhir_stack$0[1],
         v = [0, 748545548, [0, 17731, p1$2, p2]],
         menhir_stack$0 = menhir_stack$12,
         p2 = v,
         menhir_s$0 = menhir_s$5;
        break;
       case 4:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 2:
            var menhir_stack$9 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$9, menhir_lexbuf, menhir_lexer]);
            var counter$9 = counter + 1 | 0;
            return menhir_run_07
                    (counter$9, menhir_stack$9, menhir_lexbuf, menhir_lexer);
           case 8:
            var menhir_stack$10 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$10, menhir_lexbuf, menhir_lexer]);
            var counter$5 = counter + 1 | 0;
            return menhir_run_09
                    (counter$5, menhir_stack$10, menhir_lexbuf, menhir_lexer);
           case 19:
            var menhir_stack$11 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_11,
                      [0, menhir_stack$11, menhir_lexbuf, menhir_lexer]);
            var counter$1 = counter + 1 | 0;
            return menhir_run_11
                    (counter$1, menhir_stack$11, menhir_lexbuf, menhir_lexer);
           case 3:
           case 6:
           case 12:
           case 16: break;
           default:
            var
             p1$1 = menhir_stack$0[3],
             menhir_s$4 = menhir_stack$0[2],
             menhir_stack$8 = menhir_stack$0[1],
             v$1 = [0, 748545548, [0, 814983936, p1$1, p2]],
             menhir_stack$0 = menhir_stack$8,
             p2 = v$1,
             menhir_s$0 = menhir_s$4;
            break a;
         }
        return eRR(0);
       case 5:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 2:
            var menhir_stack$7 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$7, menhir_lexbuf, menhir_lexer]);
            var counter$8 = counter + 1 | 0;
            return menhir_run_07
                    (counter$8, menhir_stack$7, menhir_lexbuf, menhir_lexer);
           case 3:
           case 6:
           case 12:
           case 16: break;
           default:
            var
             p1$0 = menhir_stack$0[3],
             menhir_s$3 = menhir_stack$0[2],
             menhir_stack$6 = menhir_stack$0[1],
             v$0 = [0, 748545548, [0, 3257015, p1$0, p2]],
             menhir_stack$0 = menhir_stack$6,
             p2 = v$0,
             menhir_s$0 = menhir_s$3;
            break a;
         }
        return eRR(0);
       case 6:
        if(typeof tok$0 === "number")
         switch(tok$0){
           case 2:
            var menhir_stack$3 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_07,
                      [0, menhir_stack$3, menhir_lexbuf, menhir_lexer]);
            var counter$7 = counter + 1 | 0;
            return menhir_run_07
                    (counter$7, menhir_stack$3, menhir_lexbuf, menhir_lexer);
           case 8:
            var menhir_stack$4 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09,
                      [0, menhir_stack$4, menhir_lexbuf, menhir_lexer]);
            var counter$4 = counter + 1 | 0;
            return menhir_run_09
                    (counter$4, menhir_stack$4, menhir_lexbuf, menhir_lexer);
           case 19:
            var menhir_stack$5 = [0, menhir_stack$0, menhir_s$0, p2];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_11,
                      [0, menhir_stack$5, menhir_lexbuf, menhir_lexer]);
            var counter$0 = counter + 1 | 0;
            return menhir_run_11
                    (counter$0, menhir_stack$5, menhir_lexbuf, menhir_lexer);
           case 3:
           case 6:
           case 12:
           case 16: break;
           default:
            var
             p1 = menhir_stack$0[3],
             menhir_s$2 = menhir_stack$0[2],
             menhir_stack$2 = menhir_stack$0[1],
             v$2 = [0, 748545548, [0, 3653065, p1, p2]],
             menhir_stack$0 = menhir_stack$2,
             p2 = v$2,
             menhir_s$0 = menhir_s$2;
            break a;
         }
        return eRR(0);
       default:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_17,
                  [0,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   p2,
                   menhir_s$0,
                   tok$0]);
        var counter$12 = counter + 1 | 0;
        return menhir_run_17
                (counter$12,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 p2,
                 menhir_s$0,
                 tok$0);
     }
   }
   function menhir_run_17
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v$9, menhir_s, tok){
    if(typeof tok === "number")
     switch(tok){
       case 1:
        var tok$0 = caml_call1(menhir_lexer, menhir_lexbuf), v$10 = [0, v$9];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_goto_expr,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$10,
                   menhir_s,
                   tok$0]);
        var counter$4 = counter + 1 | 0;
        return menhir_goto_expr
                (counter$4,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$10,
                 menhir_s,
                 tok$0);
       case 2:
        var menhir_stack$0 = [0, menhir_stack, menhir_s, v$9];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_07,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_07
                (counter$3, menhir_stack$0, menhir_lexbuf, menhir_lexer);
       case 4:
        var tok$1 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$1 !== "number" && 0 === tok$1[0]){
         var v_0 = tok$1[1], tok$2 = caml_call1(menhir_lexer, menhir_lexbuf);
         if(typeof tok$2 === "number" && 16 === tok$2){
          var tok$3 = caml_call1(menhir_lexer, menhir_lexbuf);
          if(typeof tok$3 !== "number" && 0 === tok$3[0]){
           var
            v_1 = tok$3[1],
            tok$4 = caml_call1(menhir_lexer, menhir_lexbuf),
            v$8 = [2, Interp_Ast[18], [3, v_0], [3, v_1], v$9];
           if(counter >= 50)
            return caml_trampoline_return
                    (menhir_goto_expr,
                     [0,
                      menhir_stack,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$8,
                      menhir_s,
                      tok$4]);
           var counter$14 = counter + 1 | 0;
           return menhir_goto_expr
                   (counter$14,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$8,
                    menhir_s,
                    tok$4);
          }
          return eRR(0);
         }
         return eRR(0);
        }
        return eRR(0);
       case 5:
        var tok$5 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$5 !== "number" && 0 === tok$5[0]){
         var v_2 = tok$5[1], tok$6 = caml_call1(menhir_lexer, menhir_lexbuf);
         if(typeof tok$6 === "number" && 16 === tok$6){
          var tok$7 = caml_call1(menhir_lexer, menhir_lexbuf);
          if(typeof tok$7 !== "number" && 0 === tok$7[0]){
           var
            v_3 = tok$7[1],
            tok$8 = caml_call1(menhir_lexer, menhir_lexbuf),
            v$7 = [2, Interp_Ast[17], [3, v_2], [3, v_3], v$9];
           if(counter >= 50)
            return caml_trampoline_return
                    (menhir_goto_expr,
                     [0,
                      menhir_stack,
                      menhir_lexbuf,
                      menhir_lexer,
                      v$7,
                      menhir_s,
                      tok$8]);
           var counter$13 = counter + 1 | 0;
           return menhir_goto_expr
                   (counter$13,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$7,
                    menhir_s,
                    tok$8);
          }
          return eRR(0);
         }
         return eRR(0);
        }
        return eRR(0);
       case 7:
        var tok$9 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$9 !== "number" && 0 === tok$9[0]){
         var
          v_4 = tok$9[1],
          tok$10 = caml_call1(menhir_lexer, menhir_lexbuf),
          v = [1, Interp_Ast[8], [3, v_4], v$9];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v,
                    menhir_s,
                    tok$10]);
         var counter$12 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$12,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok$10);
        }
        return eRR(0);
       case 8:
        var menhir_stack$1 = [0, menhir_stack, menhir_s, v$9];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_09,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_09
                (counter$2, menhir_stack$1, menhir_lexbuf, menhir_lexer);
       case 9:
        var menhir_stack$2 = [0, menhir_stack, menhir_s, v$9];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_13,
                  [0, menhir_stack$2, menhir_lexbuf, menhir_lexer]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_13
                (counter$1, menhir_stack$2, menhir_lexbuf, menhir_lexer);
       case 10:
        var tok$11 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$11 !== "number" && 0 === tok$11[0]){
         var
          v_5 = tok$11[1],
          tok$12 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$0 = [1, Interp_Ast[9], [3, v_5], v$9];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s,
                    tok$12]);
         var counter$11 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$11,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s,
                  tok$12);
        }
        return eRR(0);
       case 11:
        var tok$13 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$13 !== "number" && 0 === tok$13[0]){
         var
          v_6 = tok$13[1],
          tok$14 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$6 = [1, Interp_Ast[15], [3, v_6], v$9];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$6,
                    menhir_s,
                    tok$14]);
         var counter$10 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$10,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$6,
                  menhir_s,
                  tok$14);
        }
        return eRR(0);
       case 13:
        var tok$15 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$15 !== "number" && 0 === tok$15[0]){
         var
          v_7 = tok$15[1],
          tok$16 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$4 = [1, Interp_Ast[13], [3, v_7], v$9];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$4,
                    menhir_s,
                    tok$16]);
         var counter$9 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$9,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$4,
                  menhir_s,
                  tok$16);
        }
        return eRR(0);
       case 14:
        var tok$17 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$17 !== "number" && 0 === tok$17[0]){
         var
          v_8 = tok$17[1],
          tok$18 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$5 = [1, Interp_Ast[14], [3, v_8], v$9];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$5,
                    menhir_s,
                    tok$18]);
         var counter$8 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$8,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$5,
                  menhir_s,
                  tok$18);
        }
        return eRR(0);
       case 15:
        var tok$19 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$19 !== "number" && 0 === tok$19[0]){
         var
          v_9 = tok$19[1],
          tok$20 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$3 = [1, Interp_Ast[12], [3, v_9], v$9];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$3,
                    menhir_s,
                    tok$20]);
         var counter$7 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$7,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$3,
                  menhir_s,
                  tok$20);
        }
        return eRR(0);
       case 17:
        var tok$21 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$21 !== "number" && 0 === tok$21[0]){
         var
          v_10 = tok$21[1],
          tok$22 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$1 = [1, Interp_Ast[10], [3, v_10], v$9];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$1,
                    menhir_s,
                    tok$22]);
         var counter$6 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$6,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$1,
                  menhir_s,
                  tok$22);
        }
        return eRR(0);
       case 18:
        var tok$23 = caml_call1(menhir_lexer, menhir_lexbuf);
        if(typeof tok$23 !== "number" && 0 === tok$23[0]){
         var
          v_11 = tok$23[1],
          tok$24 = caml_call1(menhir_lexer, menhir_lexbuf),
          v$2 = [1, Interp_Ast[11], [3, v_11], v$9];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$2,
                    menhir_s,
                    tok$24]);
         var counter$5 = counter + 1 | 0;
         return menhir_goto_expr
                 (counter$5,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$2,
                  menhir_s,
                  tok$24);
        }
        return eRR(0);
       case 19:
        var menhir_stack$3 = [0, menhir_stack, menhir_s, v$9];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_11,
                  [0, menhir_stack$3, menhir_lexbuf, menhir_lexer]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_11
                (counter$0, menhir_stack$3, menhir_lexbuf, menhir_lexer);
     }
    return eRR(0);
   }
   function menhir_goto_expr
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok === "number")
     switch(tok){
       case 3:
        var _c_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _c_]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3, menhir_stack$0, menhir_lexbuf, menhir_lexer, _c_);
       case 6:
        var _d_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _d_]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2, menhir_stack$0, menhir_lexbuf, menhir_lexer, _d_);
       case 12:
        return menhir_run_16(menhir_stack$0, 7);
     }
    else
     switch(tok[0]){
       case 1:
        var v_0 = tok[1], _e_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_0, _e_]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_0,
                 _e_);
       case 2:
        var v_1 = tok[1], _f_ = 7;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_1, _f_]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack$0,
                 menhir_lexbuf,
                 menhir_lexer,
                 v_1,
                 _f_);
     }
    return eRR(0);
   }
   function menhir_run_04$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, a, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, 726615281, a];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_prop,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_prop
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_07(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 3;
    if(typeof tok === "number")
     switch(tok){
       case 3:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_09(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 4;
    if(typeof tok === "number")
     switch(tok){
       case 3:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_13(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 6;
    if(typeof tok === "number")
     switch(tok){
       case 3:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_11(counter, menhir_stack, menhir_lexbuf, menhir_lexer){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), menhir_s = 5;
    if(typeof tok === "number")
     switch(tok){
       case 3:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_01$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$3 = counter + 1 | 0;
        return menhir_run_01$0
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
       case 6:
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_02$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s]);
        var counter$2 = counter + 1 | 0;
        return menhir_run_02$0
                (counter$2,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03$0,
                  [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s]);
        var counter$1 = counter + 1 | 0;
        return menhir_run_03$0
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v,
                 menhir_s);
       case 2:
        var v$0 = tok[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_04$0,
                  [0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   menhir_s]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_04$0
                (counter$0,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 menhir_s);
     }
    return eRR(0);
   }
   function menhir_run_01(menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_01$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_02(menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_02$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_03
   (menhir_stack, menhir_lexbuf, menhir_lexer, b, menhir_s){
    return caml_trampoline
            (menhir_run_03$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, b, menhir_s));
   }
   function menhir_run_04
   (menhir_stack, menhir_lexbuf, menhir_lexer, a, menhir_s){
    return caml_trampoline
            (menhir_run_04$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, a, menhir_s));
   }
   function prog(menhir_lexer, menhir_lexbuf){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_stack = 0,
     menhir_s = 0;
    if(typeof tok === "number")
     switch(tok){
       case 3:
        return menhir_run_01
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
       case 6:
        return menhir_run_02
                (menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s);
       case 12:
        return menhir_run_16(menhir_stack, menhir_s);
     }
    else
     switch(tok[0]){
       case 1:
        var v = tok[1];
        return menhir_run_03
                (menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s);
       case 2:
        var v$0 = tok[1];
        return menhir_run_04
                (menhir_stack, menhir_lexbuf, menhir_lexer, v$0, menhir_s);
     }
    return eRR(0);
   }
   var Interp_Parser = [0, Error, prog];
   runtime.caml_register_global(29, Interp_Parser, "Interp__Parser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Lexer
//# unitInfo: Requires: Stdlib, Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       '\0\0\xe6\xff\xe7\xff+\x004\0\r\x005\0A\0\0\x004\0\xf3\xffW\0\x01\0\0\0\xf7\xff\x01\0\xf8\xff\x0b\0\xf9\xff\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff"\0\x1f\0\x02\0\x1d\0.\0(\0"\x001\0\xf6\xff\x01\0\xf5\xff2\0\xf2\xff+\x000\0(\x007\0\xf1\xff9\0\x01\0\xf0\xff2\0-\x009\x003\0/\0\xea\xff<\0\x02\0\xef\xff=\x006\x009\0\x02\0\xee\xff>\0\xeb\xffA\0\xec\xff<\0\0\0\xed\xff<\0H\0P\0G\0O\0\x04\0P\0P\0J\0X\0L\0X\0W\0\xe8\xffY\0\xe9\xffI\0L\0\x01\0\x05\0Q\0R\0T\0^\0V\0R\0Z\0b\0Z\0V\0',
       "\xff\xff\xff\xff\xff\xff\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\xff\xff\x0b\0\x18\0\x18\0\xff\xff\x18\0\xff\xff\x18\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x01\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x15\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\x02\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1a\0U\0\x1a\0\0\0\0\0\0\0\x10\0\0\0\x16\0\x15\0\0\0\0\0\n\0\r\0!\0\x0f\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x12\0\0\0\f\0\0\0 \0\"\0\0\0\x05\0\0\0\x06\0\x04\0)\0\x13\0\0\0\0\0\x07\0\0\0\0\0\b\0\x03\0,\x005\0\t\0:\0H\0A\0\x14\0W\0\0\0\0\0\0\0V\0\0\0\0\0\x11\0\x10\0\0\0\0\x009\0\x17\0\x17\0\x17\0\x17\0\x17\0\x18\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x19\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0Q\0\x12\0@\0\x0e\0O\x008\0<\0>\0\x1d\x004\0+\0$\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x1b\0\x1c\0\x14\0\x1e\0\x1f\0\x13\0%\0&\0'\0P\0(\0$\0?\0-\0,\0.\0/\x000\0=\x003\0*\0#\x001\x002\x006\x007\x005\0;\0:\0C\0B\0A\0J\0E\0F\0G\0I\0D\0>\0K\0L\0M\0N\0<\0R\0S\0T\0\\\0X\0Y\0Z\0[\0Q\0]\0^\0_\0O\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x1a\0\x1a\0\0\0\xff\xff\x1a\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0T\0\x1a\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x11\0\xff\xff\0\0\xff\xff\r\0!\0\xff\xff\0\0\xff\xff\0\0\0\0\b\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0+\x004\0\0\x009\0G\0@\0\0\0U\0\xff\xff\xff\xff\xff\xffU\0\xff\xff\xff\xff\0\0\x0f\0\xff\xff\xff\xff\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\x04\0\0\0\x03\0\x05\0\x04\0\x04\0\x18\0\x06\0\x07\0\t\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x19\0\x1b\0\x1c\0\x1d\0\x1e\0\x1f\0#\0%\0&\0\x03\0'\0(\0\x04\0*\0-\0-\0.\0/\0\x04\0\x06\0\x07\0\t\x000\x001\x003\x006\x007\x008\0;\0=\0?\0B\0C\0D\0E\0F\0H\0=\0I\0J\0K\0L\0M\0N\0P\0R\0S\0V\0W\0X\0Y\0Z\0[\0\\\0]\0^\0_\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Stdlib = global_data.Stdlib,
    SyntaxError =
      [248, "Interp.Lexer.SyntaxError", runtime.caml_fresh_oo_id(0)],
    _a_ = [1, 1],
    _b_ = [1, 0],
    cst_Unexpected_character = "Unexpected character: ";
   function read$0(counter, lexbuf){
    var _d_ = 0;
    if(counter >= 50)
     return caml_trampoline_return(ocaml_lex_read_rec$0, [0, lexbuf, _d_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_read_rec$0(counter$0, lexbuf, _d_);
   }
   function ocaml_lex_read_rec$0(counter, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(25 >= ocaml_lex_state$1 >>> 0)
      switch(ocaml_lex_state$1){
        case 0:
         if(counter >= 50) return caml_trampoline_return(read$0, [0, lexbuf]);
         var counter$0 = counter + 1 | 0;
         return read$0(counter$0, lexbuf);
        case 1:
         return [2, caml_call1(Stdlib_Lexing[8], lexbuf)];
        case 2:
         return 6;
        case 3:
         return 0;
        case 4:
         return _a_;
        case 5:
         return _b_;
        case 6:
         return 2;
        case 7:
         return 19;
        case 8:
         return 3;
        case 9:
         return 8;
        case 10:
         return 9;
        case 11:
         return [0,
                 runtime.caml_int_of_string
                  (caml_call1(Stdlib_Lexing[8], lexbuf))];
        case 12:
         return 16;
        case 13:
         return 1;
        case 14:
         return 7;
        case 15:
         return 10;
        case 16:
         return 17;
        case 17:
         return 18;
        case 18:
         return 15;
        case 19:
         return 13;
        case 20:
         return 14;
        case 21:
         return 11;
        case 22:
         return 5;
        case 23:
         return 4;
        case 24:
         var _c_ = caml_call1(Stdlib_Lexing[8], lexbuf);
         throw caml_maybe_attach_backtrace
                ([0,
                  SyntaxError,
                  caml_call2(Stdlib[28], cst_Unexpected_character, _c_)],
                 1);
        default: return 12;
      }
     caml_call1(lexbuf[1], lexbuf);
     var ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function read(lexbuf){return caml_trampoline(read$0(0, lexbuf));}
   function ocaml_lex_read_rec(lexbuf, ocaml_lex_state){
    return caml_trampoline(ocaml_lex_read_rec$0(0, lexbuf, ocaml_lex_state));
   }
   var
    Interp_Lexer =
      [0, SyntaxError, ocaml_lex_tables, read, ocaml_lex_read_rec];
   runtime.caml_register_global(7, Interp_Lexer, "Interp__Lexer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Interp__Main
//# unitInfo: Requires: Interp__Ast, Interp__Lexer, Interp__Parser, Stdlib, Stdlib__Lexing, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Interp_Ast = global_data.Interp__Ast,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Interp_Lexer = global_data.Interp__Lexer,
    Interp_Parser = global_data.Interp__Parser,
    cst_Precondition_violated = "Precondition violated";
   function parse(s){
    var _k_ = caml_call2(Stdlib_Lexing[3], 0, s);
    return caml_call1(caml_call1(Interp_Parser[2], Interp_Lexer[3]), _k_);
   }
   function negate(exp){
    var exp$0 = simplify(exp);
    if(typeof exp$0 !== "number" && 737456202 === exp$0[1]){var a = exp$0[2]; return [0, 737456202, 1 - a];}
    return [0, 3903731, exp$0];
   }
   function collapse(binop, exp1, exp2){
    if
     (typeof exp1 !== "number"
      &&
       737456202 === exp1[1]
       && typeof exp2 !== "number" && 737456202 === exp2[1]){
     var b = exp2[2], a = exp1[2];
     if(3653065 <= binop){
      if(814983936 > binop) return [0, 737456202, a === b ? 1 : 0];
      var _i_ = 1 - a, _j_ = _i_ || b;
      return [0, 737456202, _j_];
     }
     if(3257015 <= binop){var b$0 = a ? b : a; return [0, 737456202, b$0];}
     var a$0 = a || b;
     return [0, 737456202, a$0];
    }
    return [0, 748545548, [0, binop, exp1, exp2]];
   }
   function simplify(atom){
    var _g_ = atom[1];
    if(737456202 <= _g_){
     if(748545548 > _g_) return atom;
     var
      match = atom[2],
      exp2 = match[3],
      exp1 = match[2],
      binop = match[1],
      _h_ = simplify(exp2);
     return collapse(binop, simplify(exp1), _h_);
    }
    if(726615281 <= _g_) return atom;
    var exp = atom[2];
    if(typeof exp !== "number" && 737456202 === exp[1]){var a = exp[2]; return [0, 737456202, 1 - a];}
    return negate(exp);
   }
   function ast_from_lines(lines){
    function aux(length, lines, param){
     switch(param[0]){
       case 0:
        var p = param[1]; return [0, p];
       case 1:
        var match = param[2];
        if(3 === match[0]){
         var prop = param[3], i = match[1], rule = param[1];
         return [1,
                 rule,
                 aux
                  (length,
                   lines,
                   caml_call2(Stdlib_List[8], lines, length - i | 0)),
                 prop];
        }
        break;
       case 2:
        var _e_ = param[2];
        if(3 === _e_[0]){
         var match$0 = param[3];
         if(3 === match$0[0]){
          var
           prop$0 = param[4],
           i2 = match$0[1],
           i1 = _e_[1],
           rule$0 = param[1],
           _f_ =
             aux
              (length,
               lines,
               caml_call2(Stdlib_List[8], lines, length - i2 | 0));
          return [2,
                  rule$0,
                  aux
                   (length,
                    lines,
                    caml_call2(Stdlib_List[8], lines, length - i1 | 0)),
                  _f_,
                  prop$0];
         }
        }
        break;
     }
     return caml_call1(Stdlib[2], cst_Precondition_violated);
    }
    var _d_ = caml_call1(Stdlib_List[6], lines);
    return aux(caml_call1(Stdlib_List[1], lines), lines, _d_);
   }
   function interp(s){
    try{
     var
      _a_ = ast_from_lines(parse(s)),
      _b_ = caml_call1(Interp_Ast[19], _a_),
      _c_ = [0, 1, caml_call1(Interp_Ast[4], _b_)];
     return _c_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Interp_Ast[7][1])
      throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[2];
     return [0, 0, msg];
    }
   }
   var
    Interp_Main =
      [0, parse, simplify, collapse, negate, ast_from_lines, interp];
   runtime.caml_register_global(7, Interp_Main, "Interp__Main");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
